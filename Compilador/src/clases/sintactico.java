
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package clases;

import java_cup.runtime.*;
import java.util.LinkedList;
import clases.Tablas;
import clases.Identificador;
import clases.IdValor;
import ventanas.Editor;
import java.util.ArrayList;
import clases.VariablesEnsamblador;
import ventanas.Editor;
import ventanas.ErrorGrafo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class sintactico extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Simbolos.class;
}

  /** Default constructor. */
  @Deprecated
  public sintactico() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public sintactico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public sintactico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\216\000\002\002\004\000\002\002\010\000\002\002" +
    "\004\000\002\002\004\000\002\003\004\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\004\000" +
    "\002\005\005\000\002\005\005\000\002\005\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\004\000\002\005\004\000\002\005\004\000\002\005\004" +
    "\000\002\006\006\000\002\025\004\000\002\025\003\000" +
    "\002\024\004\000\002\024\003\000\002\024\004\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\005\000\002\007\005\000" +
    "\002\007\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\005\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\004\000\002\007\004" +
    "\000\002\007\004\000\002\026\006\000\002\026\006\000" +
    "\002\026\006\000\002\026\004\000\002\026\004\000\002" +
    "\026\005\000\002\030\004\000\002\030\003\000\002\027" +
    "\003\000\002\027\004\000\002\027\003\000\002\027\004" +
    "\000\002\004\006\000\002\004\005\000\002\004\006\000" +
    "\002\004\004\000\002\022\011\000\002\022\010\000\002" +
    "\022\004\000\002\022\004\000\002\022\004\000\002\022" +
    "\004\000\002\022\004\000\002\023\006\000\002\023\006" +
    "\000\002\023\004\000\002\017\003\000\002\032\004\000" +
    "\002\032\003\000\002\033\004\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\004\000\002\050" +
    "\004\000\002\050\004\000\002\050\003\000\002\050\003" +
    "\000\002\050\004\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\003\000\002\020\003\000\002\020\003\000\002\020" +
    "\003\000\002\020\003\000\002\020\003\000\002\020\003" +
    "\000\002\020\003\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\034\006\000\002\035\006\000\002\047\006\000\002\037" +
    "\006\000\002\036\007\000\002\041\006\000\002\040\007" +
    "\000\002\042\006\000\002\043\006\000\002\044\006\000" +
    "\002\045\006\000\002\046\011\000\002\051\013\000\002" +
    "\052\005\000\002\053\005\000\002\014\011\000\002\014" +
    "\012\000\002\014\010\000\002\014\011\000\002\014\004" +
    "\000\002\015\006\000\002\015\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\016\011\000\002\016\010\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\006\003\004\051\006\001\002\000\016\003" +
    "\022\004\037\044\016\045\011\046\012\055\020\001\002" +
    "\000\004\002\u0109\001\002\000\004\056\007\001\002\000" +
    "\004\011\010\001\002\000\014\003\022\044\016\045\011" +
    "\046\012\055\020\001\002\000\004\055\u0107\001\002\000" +
    "\004\055\u0105\001\002\000\020\002\uffea\003\uffea\004\uffea" +
    "\044\uffea\045\uffea\046\uffea\055\uffea\001\002\000\004\004" +
    "\037\001\002\000\006\045\011\046\012\001\002\000\004" +
    "\055\367\001\002\000\012\002\ufffb\003\050\004\ufffb\055" +
    "\020\001\002\000\006\017\053\023\052\001\002\000\014" +
    "\003\043\044\016\045\011\046\012\055\020\001\002\000" +
    "\024\003\043\004\037\017\045\023\046\044\016\045\011" +
    "\046\012\053\044\055\041\001\002\000\020\002\uffec\003" +
    "\uffec\004\uffec\044\uffec\045\uffec\046\uffec\055\uffec\001\002" +
    "\000\006\044\016\045\011\001\002\000\006\044\016\046" +
    "\012\001\002\000\004\044\016\001\002\000\004\046\012" +
    "\001\002\000\012\002\ufff4\003\ufff4\004\ufff4\055\ufff4\001" +
    "\002\000\012\002\ufff3\003\ufff3\004\ufff3\055\ufff3\001\002" +
    "\000\004\044\016\001\002\000\014\002\ufff2\003\ufff2\004" +
    "\ufff2\045\011\055\ufff2\001\002\000\012\002\ufff5\003\ufff5" +
    "\004\ufff5\055\ufff5\001\002\000\012\002\ufff6\003\ufff6\004" +
    "\ufff6\055\ufff6\001\002\000\012\002\uffef\003\uffef\004\uffef" +
    "\055\uffef\001\002\000\004\011\121\001\002\000\006\002" +
    "\ufff9\004\ufff9\001\002\000\020\003\uffe9\017\053\023\052" +
    "\044\uffe9\045\uffe9\046\uffe9\055\uffe9\001\002\000\012\002" +
    "\ufffa\003\050\004\ufffa\055\020\001\002\000\014\004\037" +
    "\017\045\023\046\053\044\055\047\001\002\000\020\002" +
    "\uffd0\003\uffd0\004\uffd0\044\uffd0\045\uffd0\046\uffd0\055\uffd0" +
    "\001\002\000\012\002\ufff0\003\ufff0\004\ufff0\055\ufff0\001" +
    "\002\000\020\002\uffcf\003\uffcf\004\uffcf\044\uffcf\045\uffcf" +
    "\046\uffcf\055\uffcf\001\002\000\020\002\uffe9\003\uffe9\004" +
    "\uffe9\044\uffe9\045\uffe9\046\uffe9\055\uffe9\001\002\000\010" +
    "\023\046\053\044\055\047\001\002\000\020\002\uffed\003" +
    "\uffed\004\uffed\044\uffed\045\uffed\046\uffed\055\uffed\001\002" +
    "\000\012\003\056\053\054\054\060\055\057\001\002\000" +
    "\020\002\uffeb\003\uffeb\004\uffeb\044\uffeb\045\uffeb\046\uffeb" +
    "\055\uffeb\001\002\000\032\002\uffce\003\uffce\004\uffce\005" +
    "\104\006\105\007\106\010\110\017\107\044\uffce\045\uffce" +
    "\046\uffce\055\uffce\001\002\000\004\017\103\001\002\000" +
    "\010\017\101\053\100\055\102\001\002\000\012\005\062" +
    "\006\063\007\064\010\065\001\002\000\004\017\061\001" +
    "\002\000\020\002\uffd2\003\uffd2\004\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\055\uffd2\001\002\000\010\005\075\053\076\055" +
    "\077\001\002\000\010\006\073\053\072\055\074\001\002" +
    "\000\006\053\070\055\071\001\002\000\006\053\066\055" +
    "\067\001\002\000\006\014\uffe1\017\uffe1\001\002\000\006" +
    "\014\uffd7\017\uffd7\001\002\000\006\014\uffe2\017\uffe2\001" +
    "\002\000\006\014\uffd8\017\uffd8\001\002\000\006\014\uffe3" +
    "\017\uffe3\001\002\000\006\014\uffdc\017\uffdc\001\002\000" +
    "\006\014\uffd9\017\uffd9\001\002\000\006\014\uffdb\017\uffdb" +
    "\001\002\000\006\014\uffe4\017\uffe4\001\002\000\006\014" +
    "\uffda\017\uffda\001\002\000\006\014\uffd6\017\uffd6\001\002" +
    "\000\006\014\uffd4\017\uffd4\001\002\000\004\017\uffd5\001" +
    "\002\000\020\002\uffd1\003\uffd1\004\uffd1\044\uffd1\045\uffd1" +
    "\046\uffd1\055\uffd1\001\002\000\006\053\117\055\120\001" +
    "\002\000\006\053\115\055\116\001\002\000\006\053\113" +
    "\055\114\001\002\000\020\002\uffd3\003\uffd3\004\uffd3\044" +
    "\uffd3\045\uffd3\046\uffd3\055\uffd3\001\002\000\006\053\111" +
    "\055\112\001\002\000\006\014\uffe5\017\uffe5\001\002\000" +
    "\006\014\uffdd\017\uffdd\001\002\000\006\014\uffe6\017\uffe6" +
    "\001\002\000\006\014\uffde\017\uffde\001\002\000\006\014" +
    "\uffe7\017\uffe7\001\002\000\006\014\uffdf\017\uffdf\001\002" +
    "\000\006\014\uffe8\017\uffe8\001\002\000\006\014\uffe0\017" +
    "\uffe0\001\002\000\036\003\154\020\161\022\131\032\126" +
    "\033\144\034\152\035\141\036\130\037\147\040\150\041" +
    "\157\043\153\047\163\055\133\001\002\000\044\003\uffa4" +
    "\012\uffa4\013\uffa4\014\uffa4\020\uffa4\022\uffa4\032\uffa4\033" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\037\uffa4\040\uffa4\041\uffa4" +
    "\043\uffa4\047\uffa4\055\uffa4\001\002\000\004\012\364\001" +
    "\002\000\040\003\154\012\uffb9\020\161\022\131\032\126" +
    "\033\144\034\152\035\141\036\130\037\147\040\150\041" +
    "\157\043\153\047\163\055\133\001\002\000\044\003\uff9d" +
    "\012\uff9d\013\uff9d\014\uff9d\020\uff9d\022\uff9d\032\uff9d\033" +
    "\uff9d\034\uff9d\035\uff9d\036\uff9d\037\uff9d\040\uff9d\041\uff9d" +
    "\043\uff9d\047\uff9d\055\uff9d\001\002\000\004\013\360\001" +
    "\002\000\044\003\uff9b\012\uff9b\013\uff9b\014\uff9b\020\uff9b" +
    "\022\uff9b\032\uff9b\033\uff9b\034\uff9b\035\uff9b\036\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\043\uff9b\047\uff9b\055\uff9b\001\002" +
    "\000\004\013\355\001\002\000\004\013\336\001\002\000" +
    "\044\003\uffa7\012\uffa7\013\333\014\uffa7\020\uffa7\022\uffa7" +
    "\032\uffa7\033\uffa7\034\uffa7\035\uffa7\036\uffa7\037\uffa7\040" +
    "\uffa7\041\uffa7\043\uffa7\047\uffa7\055\uffa7\001\002\000\010" +
    "\013\246\016\244\023\245\001\002\000\044\003\uffa3\012" +
    "\uffa3\013\uffa3\014\uffa3\020\uffa3\022\uffa3\032\uffa3\033\uffa3" +
    "\034\uffa3\035\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3\043" +
    "\uffa3\047\uffa3\055\uffa3\001\002\000\042\003\uffa8\012\uffa8" +
    "\014\uffa8\020\uffa8\022\uffa8\032\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\036\uffa8\037\uffa8\040\uffa8\041\uffa8\043\uffa8\047\uffa8" +
    "\055\uffa8\001\002\000\044\003\uff9e\012\uff9e\013\uff9e\014" +
    "\uff9e\020\uff9e\022\uff9e\032\uff9e\033\uff9e\034\uff9e\035\uff9e" +
    "\036\uff9e\037\uff9e\040\uff9e\041\uff9e\043\uff9e\047\uff9e\055" +
    "\uff9e\001\002\000\042\003\uffaa\012\uffaa\014\uffaa\020\uffaa" +
    "\022\uffaa\032\uffaa\033\uffaa\034\uffaa\035\uffaa\036\uffaa\037" +
    "\uffaa\040\uffaa\041\uffaa\043\uffaa\047\uffaa\055\uffaa\001\002" +
    "\000\042\003\uffa9\012\uffa9\014\uffa9\020\uffa9\022\uffa9\032" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\036\uffa9\037\uffa9\040\uffa9" +
    "\041\uffa9\043\uffa9\047\uffa9\055\uffa9\001\002\000\004\013" +
    "\325\001\002\000\044\003\uff9c\012\uff9c\013\uff9c\014\uff9c" +
    "\020\uff9c\022\uff9c\032\uff9c\033\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\037\uff9c\040\uff9c\041\uff9c\043\uff9c\047\uff9c\055\uff9c" +
    "\001\002\000\042\003\uffab\012\uffab\014\uffab\020\uffab\022" +
    "\uffab\032\uffab\033\uffab\034\uffab\035\uffab\036\uffab\037\uffab" +
    "\040\uffab\041\uffab\043\uffab\047\uffab\055\uffab\001\002\000" +
    "\004\013\322\001\002\000\040\003\uffb7\012\uffb7\020\uffb7" +
    "\022\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\036\uffb7\037" +
    "\uffb7\040\uffb7\041\uffb7\043\uffb7\047\uffb7\055\uffb7\001\002" +
    "\000\044\003\uffa2\012\uffa2\013\uffa2\014\uffa2\020\uffa2\022" +
    "\uffa2\032\uffa2\033\uffa2\034\uffa2\035\uffa2\036\uffa2\037\uffa2" +
    "\040\uffa2\041\uffa2\043\uffa2\047\uffa2\055\uffa2\001\002\000" +
    "\004\013\317\001\002\000\004\013\314\001\002\000\044" +
    "\003\uff9f\012\uff9f\013\uff9f\014\uff9f\020\uff9f\022\uff9f\032" +
    "\uff9f\033\uff9f\034\uff9f\035\uff9f\036\uff9f\037\uff9f\040\uff9f" +
    "\041\uff9f\043\uff9f\047\uff9f\055\uff9f\001\002\000\004\013" +
    "\306\001\002\000\004\013\303\001\002\000\052\003\154" +
    "\011\237\012\236\013\235\014\234\017\242\020\161\022" +
    "\131\032\126\033\144\034\152\035\141\036\130\037\147" +
    "\040\150\041\157\043\153\047\163\053\243\055\240\001" +
    "\002\000\044\003\uffa5\012\uffa5\013\uffa5\014\uffa5\020\uffa5" +
    "\022\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\036\uffa5\037" +
    "\uffa5\040\uffa5\041\uffa5\043\uffa5\047\uffa5\055\uffa5\001\002" +
    "\000\044\003\uffa1\012\uffa1\013\uffa1\014\uffa1\020\uffa1\022" +
    "\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1\036\uffa1\037\uffa1" +
    "\040\uffa1\041\uffa1\043\uffa1\047\uffa1\055\uffa1\001\002\000" +
    "\004\013\231\001\002\000\042\003\uffac\012\uffac\014\uffac" +
    "\020\uffac\022\uffac\032\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\037\uffac\040\uffac\041\uffac\043\uffac\047\uffac\055\uffac" +
    "\001\002\000\004\013\174\001\002\000\044\003\uffa6\012" +
    "\uffa6\013\uffa6\014\uffa6\020\uffa6\022\uffa6\032\uffa6\033\uffa6" +
    "\034\uffa6\035\uffa6\036\uffa6\037\uffa6\040\uffa6\041\uffa6\043" +
    "\uffa6\047\uffa6\055\uffa6\001\002\000\004\055\165\001\002" +
    "\000\044\003\uffa0\012\uffa0\013\uffa0\014\uffa0\020\uffa0\022" +
    "\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0\036\uffa0\037\uffa0" +
    "\040\uffa0\041\uffa0\043\uffa0\047\uffa0\055\uffa0\001\002\000" +
    "\004\013\166\001\002\000\004\014\167\001\002\000\004" +
    "\011\170\001\002\000\040\003\154\012\171\020\161\022" +
    "\131\032\126\033\144\034\152\035\141\036\130\037\147" +
    "\040\150\041\157\043\153\047\163\055\133\001\002\000" +
    "\042\003\uffc2\012\uffc2\014\uffc2\020\uffc2\022\uffc2\032\uffc2" +
    "\033\uffc2\034\uffc2\035\uffc2\036\uffc2\037\uffc2\040\uffc2\041" +
    "\uffc2\043\uffc2\047\uffc2\055\uffc2\001\002\000\004\012\173" +
    "\001\002\000\042\003\uffc3\012\uffc3\014\uffc3\020\uffc3\022" +
    "\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\036\uffc3\037\uffc3" +
    "\040\uffc3\041\uffc3\043\uffc3\047\uffc3\055\uffc3\001\002\000" +
    "\006\053\175\055\177\001\002\000\020\023\205\024\203" +
    "\025\206\026\200\027\204\030\202\031\207\001\002\000" +
    "\004\014\212\001\002\000\020\023\205\024\203\025\206" +
    "\026\200\027\204\030\202\031\207\001\002\000\006\053" +
    "\uff77\055\uff77\001\002\000\006\053\210\055\211\001\002" +
    "\000\006\053\uff75\055\uff75\001\002\000\006\053\uff79\055" +
    "\uff79\001\002\000\006\053\uff76\055\uff76\001\002\000\006" +
    "\053\uff7a\055\uff7a\001\002\000\006\053\uff78\055\uff78\001" +
    "\002\000\006\053\uff74\055\uff74\001\002\000\004\014\uff82" +
    "\001\002\000\004\014\uff84\001\002\000\004\011\213\001" +
    "\002\000\040\003\154\012\214\020\161\022\131\032\126" +
    "\033\144\034\152\035\141\036\130\037\147\040\150\041" +
    "\157\043\153\047\163\055\133\001\002\000\044\003\uff89" +
    "\012\uff89\014\uff89\020\uff89\021\217\022\uff89\032\uff89\033" +
    "\uff89\034\uff89\035\uff89\036\uff89\037\uff89\040\uff89\041\uff89" +
    "\043\uff89\047\uff89\055\uff89\001\002\000\004\012\216\001" +
    "\002\000\044\003\uff8b\012\uff8b\014\uff8b\020\uff8b\021\217" +
    "\022\uff8b\032\uff8b\033\uff8b\034\uff8b\035\uff8b\036\uff8b\037" +
    "\uff8b\040\uff8b\041\uff8b\043\uff8b\047\uff8b\055\uff8b\001\002" +
    "\000\004\011\221\001\002\000\042\003\uff8a\012\uff8a\014" +
    "\uff8a\020\uff8a\022\uff8a\032\uff8a\033\uff8a\034\uff8a\035\uff8a" +
    "\036\uff8a\037\uff8a\040\uff8a\041\uff8a\043\uff8a\047\uff8a\055" +
    "\uff8a\001\002\000\040\003\154\012\222\020\161\022\131" +
    "\032\126\033\144\034\152\035\141\036\130\037\147\040" +
    "\150\041\157\043\153\047\163\055\133\001\002\000\042" +
    "\003\uff85\012\uff85\014\uff85\020\uff85\022\uff85\032\uff85\033" +
    "\uff85\034\uff85\035\uff85\036\uff85\037\uff85\040\uff85\041\uff85" +
    "\043\uff85\047\uff85\055\uff85\001\002\000\004\012\224\001" +
    "\002\000\042\003\uff86\012\uff86\014\uff86\020\uff86\022\uff86" +
    "\032\uff86\033\uff86\034\uff86\035\uff86\036\uff86\037\uff86\040" +
    "\uff86\041\uff86\043\uff86\047\uff86\055\uff86\001\002\000\042" +
    "\003\uff88\012\uff88\014\uff88\020\uff88\022\uff88\032\uff88\033" +
    "\uff88\034\uff88\035\uff88\036\uff88\037\uff88\040\uff88\041\uff88" +
    "\043\uff88\047\uff88\055\uff88\001\002\000\006\053\227\055" +
    "\230\001\002\000\004\014\uff83\001\002\000\004\014\uff81" +
    "\001\002\000\004\014\232\001\002\000\004\017\233\001" +
    "\002\000\044\003\uff90\012\uff90\013\uff90\014\uff90\020\uff90" +
    "\022\uff90\032\uff90\033\uff90\034\uff90\035\uff90\036\uff90\037" +
    "\uff90\040\uff90\041\uff90\043\uff90\047\uff90\055\uff90\001\002" +
    "\000\042\003\uffbf\012\uffbf\014\uffbf\020\uffbf\022\uffbf\032" +
    "\uffbf\033\uffbf\034\uffbf\035\uffbf\036\uffbf\037\uffbf\040\uffbf" +
    "\041\uffbf\043\uffbf\047\uffbf\055\uffbf\001\002\000\042\003" +
    "\uffc0\012\uffc0\014\uffc0\020\uffc0\022\uffc0\032\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\036\uffc0\037\uffc0\040\uffc0\041\uffc0\043" +
    "\uffc0\047\uffc0\055\uffc0\001\002\000\042\003\uffbd\012\uffbd" +
    "\014\uffbd\020\uffbd\022\uffbd\032\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\043\uffbd\047\uffbd" +
    "\055\uffbd\001\002\000\042\003\uffbe\012\uffbe\014\uffbe\020" +
    "\uffbe\022\uffbe\032\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\037\uffbe\040\uffbe\041\uffbe\043\uffbe\047\uffbe\055\uffbe\001" +
    "\002\000\050\003\uffc1\012\uffc1\013\246\014\uffc1\016\244" +
    "\020\uffc1\022\uffc1\023\245\032\uffc1\033\uffc1\034\uffc1\035" +
    "\uffc1\036\uffc1\037\uffc1\040\uffc1\041\uffc1\043\uffc1\047\uffc1" +
    "\055\uffc1\001\002\000\042\003\uffba\012\uffba\014\uffba\020" +
    "\uffba\022\uffba\032\uffba\033\uffba\034\uffba\035\uffba\036\uffba" +
    "\037\uffba\040\uffba\041\uffba\043\uffba\047\uffba\055\uffba\001" +
    "\002\000\042\003\uffc4\012\uffc4\014\uffc4\020\uffc4\022\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040" +
    "\uffc4\041\uffc4\043\uffc4\047\uffc4\055\uffc4\001\002\000\042" +
    "\003\uff87\012\uff87\014\uff87\020\uff87\022\uff87\032\uff87\033" +
    "\uff87\034\uff87\035\uff87\036\uff87\037\uff87\040\uff87\041\uff87" +
    "\043\uff87\047\uff87\055\uff87\001\002\000\004\042\264\001" +
    "\002\000\010\003\254\053\251\055\255\001\002\000\004" +
    "\014\247\001\002\000\004\017\250\001\002\000\042\003" +
    "\uffbc\012\uffbc\014\uffbc\020\uffbc\022\uffbc\032\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc\043" +
    "\uffbc\047\uffbc\055\uffbc\001\002\000\014\005\104\006\105" +
    "\007\106\010\110\017\263\001\002\000\004\017\262\001" +
    "\002\000\042\003\uffc6\012\uffc6\014\uffc6\020\uffc6\022\uffc6" +
    "\032\uffc6\033\uffc6\034\uffc6\035\uffc6\036\uffc6\037\uffc6\040" +
    "\uffc6\041\uffc6\043\uffc6\047\uffc6\055\uffc6\001\002\000\010" +
    "\017\260\053\100\055\261\001\002\000\056\003\uffcb\005" +
    "\062\006\063\007\064\010\065\012\uffcb\014\uffcb\017\257" +
    "\020\uffcb\022\uffcb\023\245\032\uffcb\033\uffcb\034\uffcb\035" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\043\uffcb\047\uffcb" +
    "\055\uffcb\001\002\000\042\003\uffc9\012\uffc9\014\uffc9\020" +
    "\uffc9\022\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\036\uffc9" +
    "\037\uffc9\040\uffc9\041\uffc9\043\uffc9\047\uffc9\055\uffc9\001" +
    "\002\000\042\003\uffca\012\uffca\014\uffca\020\uffca\022\uffca" +
    "\032\uffca\033\uffca\034\uffca\035\uffca\036\uffca\037\uffca\040" +
    "\uffca\041\uffca\043\uffca\047\uffca\055\uffca\001\002\000\044" +
    "\003\uffc4\012\uffc4\014\uffc4\017\uffd4\020\uffc4\022\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\036\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\043\uffc4\047\uffc4\055\uffc4\001\002\000\044\003" +
    "\uffc8\012\uffc8\014\uffc8\017\uffd5\020\uffc8\022\uffc8\032\uffc8" +
    "\033\uffc8\034\uffc8\035\uffc8\036\uffc8\037\uffc8\040\uffc8\041" +
    "\uffc8\043\uffc8\047\uffc8\055\uffc8\001\002\000\042\003\uffc5" +
    "\012\uffc5\014\uffc5\020\uffc5\022\uffc5\032\uffc5\033\uffc5\034" +
    "\uffc5\035\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\043\uffc5" +
    "\047\uffc5\055\uffc5\001\002\000\042\003\uffc7\012\uffc7\014" +
    "\uffc7\020\uffc7\022\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7" +
    "\036\uffc7\037\uffc7\040\uffc7\041\uffc7\043\uffc7\047\uffc7\055" +
    "\uffc7\001\002\000\004\013\265\001\002\000\010\003\272" +
    "\053\266\055\273\001\002\000\020\005\104\006\105\007" +
    "\106\010\110\014\uffb4\015\302\055\uffae\001\002\000\004" +
    "\014\300\001\002\000\004\014\uffb3\001\002\000\004\055" +
    "\277\001\002\000\042\003\154\017\101\020\161\022\131" +
    "\032\126\033\144\034\152\035\141\036\130\037\147\040" +
    "\150\041\157\043\153\047\163\053\100\055\275\001\002" +
    "\000\020\005\062\006\063\007\064\010\065\014\uffb5\015" +
    "\274\055\uffaf\001\002\000\004\055\uffb1\001\002\000\012" +
    "\013\246\014\uffd5\016\244\023\245\001\002\000\006\014" +
    "\uffb2\055\uffad\001\002\000\004\014\uffb6\001\002\000\004" +
    "\017\301\001\002\000\044\003\uff8f\012\uff8f\013\uff8f\014" +
    "\uff8f\020\uff8f\022\uff8f\032\uff8f\033\uff8f\034\uff8f\035\uff8f" +
    "\036\uff8f\037\uff8f\040\uff8f\041\uff8f\043\uff8f\047\uff8f\055" +
    "\uff8f\001\002\000\004\055\uffb0\001\002\000\004\014\304" +
    "\001\002\000\004\017\305\001\002\000\044\003\uff98\012" +
    "\uff98\013\uff98\014\uff98\020\uff98\022\uff98\032\uff98\033\uff98" +
    "\034\uff98\035\uff98\036\uff98\037\uff98\040\uff98\041\uff98\043" +
    "\uff98\047\uff98\055\uff98\001\002\000\012\003\272\014\310" +
    "\053\266\055\273\001\002\000\004\014\312\001\002\000" +
    "\004\017\311\001\002\000\044\003\uff97\012\uff97\013\uff97" +
    "\014\uff97\020\uff97\022\uff97\032\uff97\033\uff97\034\uff97\035" +
    "\uff97\036\uff97\037\uff97\040\uff97\041\uff97\043\uff97\047\uff97" +
    "\055\uff97\001\002\000\004\017\313\001\002\000\044\003" +
    "\uff96\012\uff96\013\uff96\014\uff96\020\uff96\022\uff96\032\uff96" +
    "\033\uff96\034\uff96\035\uff96\036\uff96\037\uff96\040\uff96\041" +
    "\uff96\043\uff96\047\uff96\055\uff96\001\002\000\004\014\315" +
    "\001\002\000\004\017\316\001\002\000\044\003\uff91\012" +
    "\uff91\013\uff91\014\uff91\020\uff91\022\uff91\032\uff91\033\uff91" +
    "\034\uff91\035\uff91\036\uff91\037\uff91\040\uff91\041\uff91\043" +
    "\uff91\047\uff91\055\uff91\001\002\000\004\014\320\001\002" +
    "\000\004\017\321\001\002\000\044\003\uff92\012\uff92\013" +
    "\uff92\014\uff92\020\uff92\022\uff92\032\uff92\033\uff92\034\uff92" +
    "\035\uff92\036\uff92\037\uff92\040\uff92\041\uff92\043\uff92\047" +
    "\uff92\055\uff92\001\002\000\004\014\323\001\002\000\004" +
    "\017\324\001\002\000\044\003\uff99\012\uff99\013\uff99\014" +
    "\uff99\020\uff99\022\uff99\032\uff99\033\uff99\034\uff99\035\uff99" +
    "\036\uff99\037\uff99\040\uff99\041\uff99\043\uff99\047\uff99\055" +
    "\uff99\001\002\000\012\003\272\014\327\053\266\055\273" +
    "\001\002\000\004\014\331\001\002\000\004\017\330\001" +
    "\002\000\044\003\uff95\012\uff95\013\uff95\014\uff95\020\uff95" +
    "\022\uff95\032\uff95\033\uff95\034\uff95\035\uff95\036\uff95\037" +
    "\uff95\040\uff95\041\uff95\043\uff95\047\uff95\055\uff95\001\002" +
    "\000\004\017\332\001\002\000\044\003\uff94\012\uff94\013" +
    "\uff94\014\uff94\020\uff94\022\uff94\032\uff94\033\uff94\034\uff94" +
    "\035\uff94\036\uff94\037\uff94\040\uff94\041\uff94\043\uff94\047" +
    "\uff94\055\uff94\001\002\000\004\014\334\001\002\000\004" +
    "\017\335\001\002\000\042\003\uffbb\012\uffbb\014\uffbb\020" +
    "\uffbb\022\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\037\uffbb\040\uffbb\041\uffbb\043\uffbb\047\uffbb\055\uffbb\001" +
    "\002\000\006\053\337\055\341\001\002\000\020\023\205" +
    "\024\203\025\206\026\200\027\204\030\202\031\207\001" +
    "\002\000\004\014\345\001\002\000\020\023\205\024\203" +
    "\025\206\026\200\027\204\030\202\031\207\001\002\000" +
    "\006\053\343\055\344\001\002\000\004\014\uff7e\001\002" +
    "\000\004\014\uff80\001\002\000\004\011\346\001\002\000" +
    "\040\003\154\012\347\020\161\022\131\032\126\033\144" +
    "\034\152\035\141\036\130\037\147\040\150\041\157\043" +
    "\153\047\163\055\133\001\002\000\042\003\uff7b\012\uff7b" +
    "\014\uff7b\020\uff7b\022\uff7b\032\uff7b\033\uff7b\034\uff7b\035" +
    "\uff7b\036\uff7b\037\uff7b\040\uff7b\041\uff7b\043\uff7b\047\uff7b" +
    "\055\uff7b\001\002\000\004\012\351\001\002\000\042\003" +
    "\uff7c\012\uff7c\014\uff7c\020\uff7c\022\uff7c\032\uff7c\033\uff7c" +
    "\034\uff7c\035\uff7c\036\uff7c\037\uff7c\040\uff7c\041\uff7c\043" +
    "\uff7c\047\uff7c\055\uff7c\001\002\000\006\053\353\055\354" +
    "\001\002\000\004\014\uff7f\001\002\000\004\014\uff7d\001" +
    "\002\000\004\014\356\001\002\000\004\017\357\001\002" +
    "\000\044\003\uff93\012\uff93\013\uff93\014\uff93\020\uff93\022" +
    "\uff93\032\uff93\033\uff93\034\uff93\035\uff93\036\uff93\037\uff93" +
    "\040\uff93\041\uff93\043\uff93\047\uff93\055\uff93\001\002\000" +
    "\004\014\361\001\002\000\004\017\362\001\002\000\044" +
    "\003\uff9a\012\uff9a\013\uff9a\014\uff9a\020\uff9a\022\uff9a\032" +
    "\uff9a\033\uff9a\034\uff9a\035\uff9a\036\uff9a\037\uff9a\040\uff9a" +
    "\041\uff9a\043\uff9a\047\uff9a\055\uff9a\001\002\000\040\003" +
    "\uffb8\012\uffb8\020\uffb8\022\uffb8\032\uffb8\033\uffb8\034\uffb8" +
    "\035\uffb8\036\uffb8\037\uffb8\040\uffb8\041\uffb8\043\uffb8\047" +
    "\uffb8\055\uffb8\001\002\000\014\002\uffee\003\uffee\004\uffee" +
    "\012\uffee\055\uffee\001\002\000\006\002\ufffd\004\ufffd\001" +
    "\002\000\012\002\ufffc\003\050\004\ufffc\055\020\001\002" +
    "\000\004\015\370\001\002\000\004\055\371\001\002\000" +
    "\004\015\372\001\002\000\004\055\373\001\002\000\004" +
    "\015\374\001\002\000\004\055\375\001\002\000\004\017" +
    "\376\001\002\000\016\002\uff8e\003\uff8e\004\uff8e\045\uff8e" +
    "\046\uff8e\055\uff8e\001\002\000\004\046\012\001\002\000" +
    "\014\002\ufff1\003\ufff1\004\ufff1\045\011\055\ufff1\001\002" +
    "\000\012\002\ufff8\003\ufff8\004\ufff8\055\ufff8\001\002\000" +
    "\012\002\ufff7\003\ufff7\004\ufff7\055\ufff7\001\002\000\004" +
    "\012\u0104\001\002\000\004\002\000\001\002\000\004\017" +
    "\u0106\001\002\000\016\002\uff8d\003\uff8d\004\uff8d\044\uff8d" +
    "\045\uff8d\055\uff8d\001\002\000\004\017\u0108\001\002\000" +
    "\016\002\uff8c\003\uff8c\004\uff8c\044\uff8c\046\uff8c\055\uff8c" +
    "\001\002\000\004\002\001\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\004\002\004\001\001\000\024\003\u010a\005" +
    "\016\006\u0109\024\022\025\020\026\012\051\014\052\023" +
    "\053\024\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\003\013\005\016\024\022\025\020" +
    "\026\012\051\014\052\023\053\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\u0102" +
    "\001\001\000\006\052\377\053\376\001\001\000\002\001" +
    "\001\000\010\024\022\025\365\026\012\001\001\000\002" +
    "\001\001\000\016\005\364\024\050\026\012\051\014\052" +
    "\023\053\024\001\001\000\022\005\037\006\035\024\022" +
    "\025\041\026\012\051\014\052\023\053\024\001\001\000" +
    "\002\001\001\000\006\051\032\053\031\001\001\000\006" +
    "\051\026\052\025\001\001\000\004\051\030\001\001\000" +
    "\004\052\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\051\034\001\001\000\004\053\033\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\024" +
    "\050\026\012\001\001\000\004\006\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\136\014\134\016\137\017\122\020\131\022\157\023" +
    "\142\031\144\032\123\034\161\035\154\036\145\037\133" +
    "\040\163\041\155\042\150\043\135\044\124\045\141\046" +
    "\126\047\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\050\004\136\014\134\016\137\020\131\022\157\023" +
    "\142\031\362\034\161\035\154\036\145\037\133\040\163" +
    "\041\155\042\150\043\135\044\124\045\141\046\126\047" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\050\004\136\014\134\016\137\020" +
    "\131\022\157\023\142\031\240\034\161\035\154\036\145" +
    "\037\133\040\163\041\155\042\150\043\135\044\124\045" +
    "\141\046\126\047\121\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\136\014\134\016\137\017\171\020\131\022\157" +
    "\023\142\031\144\032\123\034\161\035\154\036\145\037" +
    "\133\040\163\041\155\042\150\043\135\044\124\045\141" +
    "\046\126\047\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\175\001\001\000\004" +
    "\013\225\001\001\000\002\001\001\000\004\013\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\136\014\134\016" +
    "\137\017\214\020\131\022\157\023\142\031\144\032\123" +
    "\034\161\035\154\036\145\037\133\040\163\041\155\042" +
    "\150\043\135\044\124\045\141\046\126\047\121\001\001" +
    "\000\004\015\224\001\001\000\002\001\001\000\004\015" +
    "\217\001\001\000\002\001\001\000\002\001\001\000\054" +
    "\004\136\014\134\016\137\017\222\020\131\022\157\023" +
    "\142\031\144\032\123\034\161\035\154\036\145\037\133" +
    "\040\163\041\155\042\150\043\135\044\124\045\141\046" +
    "\126\047\121\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\004\255\007\251\027\252\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\267\033" +
    "\266\050\270\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\050\004\136\014" +
    "\134\016\137\020\131\022\157\023\142\031\275\034\161" +
    "\035\154\036\145\037\133\040\163\041\155\042\150\043" +
    "\135\044\124\045\141\046\126\047\121\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\007\267\033\306\050\270\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\007\267\033\325\050\270\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\337\001\001" +
    "\000\004\013\351\001\001\000\002\001\001\000\004\013" +
    "\341\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\054\004\136\014\134\016" +
    "\137\017\347\020\131\022\157\023\142\031\144\032\123" +
    "\034\161\035\154\036\145\037\133\040\163\041\155\042" +
    "\150\043\135\044\124\045\141\046\126\047\121\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\024\050\026" +
    "\012\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\052\u0101" +
    "\001\001\000\004\053\u0100\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$sintactico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$sintactico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$sintactico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    //tabla en donde se almacenan los errores
    public static LinkedList<TError> TablaES = new LinkedList<TError>();
    public static ArrayList<Identificador> TablaId = new ArrayList<Identificador>();
    public static Identificador identificador = new Identificador();
    public static int count=0;
    //variable para guardar el lexema;
    public static String lexema="";
    // metodo al que se llama automaticamente ante algún error sintactico

    public void syntax_error(Symbol s)
    {
        Editor.arrayError.add(new ErrorLink("[Error sintactico] Token  "+s.value.toString()+"  no identificado en la fila: "+(s.right+1)+", columna:"+(s.left+1)," caracter no deseado",(s.right+1),(s.left+1),s.value.toString()));
        //Editor.setError();

        /*lexema = s.value.toString();
        int fila = s.right+1;
        int columna = s.left+1;
        TError datos = new TError(lexema,fila,columna,"Error Sintactico","Se esperaba otro caracter");
        TablaES.add(datos);*/  
  
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        /*String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        TError datos = new TError(lexema,fila,columna,"Error Sintactico Irr","Se esperaba otro caracter");
        TablaES.add(datos);
        */
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$sintactico$actions {



  private final sintactico parser;

  /** Constructor */
  CUP$sintactico$actions(sintactico parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action_part00000000(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$sintactico$result;

      /* select the action based on the action number */
      switch (CUP$sintactico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		RESULT = start_val;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$sintactico$parser.done_parsing();
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= reservada Clase delimitador_izquierdo declaraciones main delimitador_derecho 
            {
              Object RESULT =null;
		
    Generador.gc(Generador.FIN,null,null,null); 

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error declaraciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= error main 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaraciones ::= variables_def definiciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaraciones ::= definiciones variables_def 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaraciones ::= definiciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaraciones ::= error variables_def 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaraciones ::= error definiciones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("declaraciones",1, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // definiciones ::= defRueda defBase defSensor 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // definiciones ::= defRueda defSensor defBase 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // definiciones ::= defBase defSensor defRueda 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // definiciones ::= defBase defRueda defSensor 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // definiciones ::= defSensor defRueda defBase 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // definiciones ::= defSensor defBase defRueda 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // definiciones ::= defBase defRueda 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // definiciones ::= defRueda defBase 
            {
              Object RESULT =null;
		
Generador.gc(Generador.DECLARACION_COMPLETA,null,null,null);
Editor.txtEnsamblador.append("\ninicio:\n\n	goto inicio\n\n");

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // definiciones ::= error fin_linea 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // definiciones ::= error main 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("definiciones",3, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // main ::= inicio delimitador_izquierdo cuerpo delimitador_derecho 
            {
              Object RESULT =null;
		
    Generador.gc(Generador.MAIN,null,null,null);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("main",4, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // variables_def ::= variables_def variable_def 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variables_def",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // variables_def ::= variable_def 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variables_def",19, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // variable_def ::= Identificador fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		  
                    //Tablas.addIdentificador();
                    //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
                    Identificador identificador = new Identificador(id,"variable","definicion","null");
                    System.out.println(" "+identificador.lexema+" "+identificador.tipo);
                    IdValor valor=new IdValor(id,-1,"definicion");
                    VariablesEnsamblador.variables.add(valor);
                    sintactico.TablaId.add(identificador);   
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable_def",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // variable_def ::= asignacion_def 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable_def",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // variable_def ::= error Identificador 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable_def",18, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresiones ::= Numero suma Numero 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    String resultado=(Integer.parseInt(op1)+Integer.parseInt(op2))+"";
    Generador.gc(Generador.MAS, resultado, null,t);
    VariablesEnsamblador.last=Integer.parseInt(resultado);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresiones ::= Numero resta Numero 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    String resultado=(Integer.parseInt(op1)-Integer.parseInt(op2))+"";
    Generador.gc(Generador.MENOS, resultado, null,t);
    VariablesEnsamblador.last=Integer.parseInt(resultado);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresiones ::= Numero multiplicacion Numero 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    String resultado=(Integer.parseInt(op1)*Integer.parseInt(op2))+"";
    Generador.gc(Generador.POR, resultado, null,t);
    VariablesEnsamblador.last=Integer.parseInt(resultado);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresiones ::= Numero division Numero 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    String resultado=(Integer.parseInt(op1)/Integer.parseInt(op2))+"";
    Generador.gc(Generador.DIV, resultado, null,t);
    VariablesEnsamblador.last=Integer.parseInt(resultado);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresiones ::= Identificador suma Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor+Integer.parseInt(op2))+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MAS, id1,op2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresiones ::= Identificador resta Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor-Integer.parseInt(op2))+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));        
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MENOS, id1,op2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresiones ::= Identificador multiplicacion Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor*Integer.parseInt(op2))+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.POR, id1,op2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresiones ::= Identificador division Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String op2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor/Integer.parseInt(op2))+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.DIV, id1,op2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresiones ::= Numero suma Identificador 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null){
        String resultado=(Integer.parseInt(op1)+valor.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MAS, op1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresiones ::= Numero resta Identificador 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null){
        String resultado=(Integer.parseInt(op1)-valor.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MENOS, op1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresiones ::= Numero multiplicacion Identificador 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null){
        String resultado=(Integer.parseInt(op1)*valor.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.POR, op1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresiones ::= Numero division Identificador 
            {
              Object RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String op1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null){
        String resultado=(Integer.parseInt(op1)/valor.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.DIV, op1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresiones ::= Identificador resta resta 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id,"variable","asignacion","null");
    IdValor valor=VariablesEnsamblador.buscar(id,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor-1)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id+" no ha sido declarada.","columna:"+(idleft+1)+", fila:"+(idright+1),(idright+1),(idleft+1),id));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MENOS, id,"1",id);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresiones ::= Identificador suma suma 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id,"variable","asignacion","null");
    IdValor valor=VariablesEnsamblador.buscar(id,"asignacion");
    if(valor!=null){
        String resultado=(valor.valor+1)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id+" no ha sido declarada.","columna:"+(idleft+1)+", fila:"+(idright+1),(idright+1),(idleft+1),id));
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    sintactico.TablaId.add(identificador);   
    Generador.gc(Generador.MAS, id,"1",id);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresiones ::= Identificador suma Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    Identificador identificador2 = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    IdValor valor2=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null&&valor2!=null){
        String resultado=(valor.valor+valor2.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        if(valor==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));           
        }
        if(valor2==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2)); 
        }
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    VariablesEnsamblador.variables.add(valor2);
    sintactico.TablaId.add(identificador);   
    sintactico.TablaId.add(identificador2);   
    Generador.gc(Generador.MAS, id1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresiones ::= Identificador resta Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    Identificador identificador2 = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    IdValor valor2=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null&&valor2!=null){
        String resultado=(valor.valor-valor2.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        if(valor==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));           
        }
        if(valor2==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2)); 
        }
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    VariablesEnsamblador.variables.add(valor2);
    sintactico.TablaId.add(identificador);   
    sintactico.TablaId.add(identificador2);   
    Generador.gc(Generador.MENOS, id1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresiones ::= Identificador multiplicacion Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    Identificador identificador2 = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    IdValor valor2=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null&&valor2!=null){
        String resultado=(valor.valor*valor2.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        if(valor==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));           
        }
        if(valor2==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2)); 
        }
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    VariablesEnsamblador.variables.add(valor2);
    sintactico.TablaId.add(identificador);   
    sintactico.TablaId.add(identificador2);   
    Generador.gc(Generador.POR, id1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresiones ::= Identificador division Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		 
    String t=Generador.nuevaTemp();
    Identificador identificador = new Identificador(id1,"variable","llamada","null");
    Identificador identificador2 = new Identificador(id2,"variable","llamada","null");
    IdValor valor=VariablesEnsamblador.buscar(id1,"asignacion");
    IdValor valor2=VariablesEnsamblador.buscar(id2,"asignacion");
    if(valor!=null&&valor2!=null){
        String resultado=(valor.valor/valor2.valor)+"";
        VariablesEnsamblador.last=Integer.parseInt(resultado);
    }else{
        if(valor==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no ha sido declarada.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));           
        }
        if(valor2==null){
            Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id2+" no ha sido declarada.","columna:"+(id2left+1)+", fila:"+(id2right+1),(id2right+1),(id2left+1),id2)); 
        }
        Editor.errores++;
    }
    VariablesEnsamblador.variables.add(valor);
    VariablesEnsamblador.variables.add(valor2);
    sintactico.TablaId.add(identificador);   
    sintactico.TablaId.add(identificador2);   
    Generador.gc(Generador.DIV, id1,id2,t);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresiones ::= error Numero 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresiones ::= error Identificador 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresiones ::= error fin_linea 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("expresiones",5, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // asignacion_def ::= Identificador igual Numero fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		  
    

    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        System.out.println("Entre por palabra si="+VariablesEnsamblador.palabra_si+" Respuesta="+VariablesEnsamblador.respuesta_si+" y el si esta en:" +VariablesEnsamblador.si_activado+" Valor: "+n);
        Identificador identificador = new Identificador(id,"variable","asignacion",n);
        IdValor valor=new IdValor(id,Integer.parseInt(n),"asignacion");
        VariablesEnsamblador.asignar(id,Integer.parseInt(n));
        sintactico.TablaId.add(identificador);   
    }
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            System.out.println("Entre por palabra si="+VariablesEnsamblador.palabra_si+" Respuesta="+VariablesEnsamblador.respuesta_si+"Valor: "+n);
            Identificador identificador = new Identificador(id,"variable","asignacion",n);
            IdValor valor=new IdValor(id,Integer.parseInt(n),"asignacion");
            VariablesEnsamblador.asignar(id,Integer.parseInt(n));
            sintactico.TablaId.add(identificador); 
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            System.out.println("Entre por palabra si="+VariablesEnsamblador.palabra_si+" Respuesta="+VariablesEnsamblador.respuesta_si+"Valor: "+n);
            Identificador identificador = new Identificador(id,"variable","asignacion",n);
            IdValor valor=new IdValor(id,Integer.parseInt(n),"asignacion");
            VariablesEnsamblador.asignar(id,Integer.parseInt(n));
            sintactico.TablaId.add(identificador); 
        }
    }
        if(VariablesEnsamblador.mientras_activado!=0){
            //WHILE
        }
/*       ErrorGrafo.tipo_error=1;
       ErrorGrafo e=new ErrorGrafo();
       e.setVisible(true); 
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // asignacion_def ::= Identificador igual Cadena fin_linea 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
   Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no permite cadenas de texto solo números.","columna:"+(nleft+1)+", fila:"+(nright+1),(nright+1),(nleft+1),n));
   Editor.errores++;
/*
   ErrorGrafo.tipo_error=2;
   ErrorGrafo e=new ErrorGrafo();
   e.setVisible(true); 
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // asignacion_def ::= Identificador igual expresiones fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
    System.out.println("Entre por palabra si="+VariablesEnsamblador.palabra_si+" Respuesta="+VariablesEnsamblador.respuesta_si+" y el si esta en:" +VariablesEnsamblador.si_activado+" Valor: "+VariablesEnsamblador.last);
    Identificador identificador = new Identificador(id,"variable","asignacion",""+VariablesEnsamblador.last);
    IdValor valor=new IdValor(id,VariablesEnsamblador.last,"asignacion");
    VariablesEnsamblador.asignar(id,VariablesEnsamblador.last);
    sintactico.TablaId.add(identificador);   

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // asignacion_def ::= error Numero 
            {
              Object RESULT =null;
		
/*
   ErrorGrafo.tipo_error=3;
   ErrorGrafo e=new ErrorGrafo();
   e.setVisible(true); 
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // asignacion_def ::= error igual 
            {
              Object RESULT =null;
		
/*
   ErrorGrafo.tipo_error=4;
   ErrorGrafo e=new ErrorGrafo();
   e.setVisible(true); 
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // asignacion_def ::= Identificador igual Numero 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
   Editor.arrayError.add(new ErrorLink("[Error sintactico] Token ; faltante","columna:"+(nleft+1)+", fila:"+(nright+1),(nright+1),(nleft+1),n));   
   Editor.errores++;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion_def",20, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // variables ::= variables variable 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variables",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // variables ::= variable 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variables",22, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // variable ::= Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
            //Tablas.addIdentificador();
            //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
            Identificador identificador = new Identificador(id,"variable","llamada","null");
            System.out.println(" "+identificador.lexema+" "+identificador.tipo);
            sintactico.TablaId.add(identificador);
  
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // variable ::= Identificador fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		  
            //Tablas.addIdentificador();
            //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
            Identificador identificador = new Identificador(id,"variable","llamada","null");
            System.out.println(" "+identificador.lexema+" "+identificador.tipo);
            sintactico.TablaId.add(identificador);   
        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // variable ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // variable ::= error Identificador 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("variable",21, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // asignacion ::= Identificador igual Numero fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		  
        javax.swing.JOptionPane.showMessageDialog(null,"Entre!");
        if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
            Identificador identificador = new Identificador(id,"variable","asignacion",n);
            IdValor iv=new IdValor(id,Integer.parseInt(n),"asignacion");
            VariablesEnsamblador.asignar(id,Integer.parseInt(n));
            System.out.println("  "+identificador.lexema+" "+identificador.tipo+" "+identificador.valor);
            sintactico.TablaId.add(identificador); 
        }
        if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                Identificador identificador = new Identificador(id,"variable","asignacion",n);
                IdValor iv=new IdValor(id,Integer.parseInt(n),"asignacion");
                VariablesEnsamblador.asignar(id,Integer.parseInt(n));
                System.out.println("  "+identificador.lexema+" "+identificador.tipo+" "+identificador.valor);
                sintactico.TablaId.add(identificador);
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                Identificador identificador = new Identificador(id,"variable","asignacion",n);
                IdValor iv=new IdValor(id,Integer.parseInt(n),"asignacion");
                VariablesEnsamblador.asignar(id,Integer.parseInt(n));
                System.out.println("  "+identificador.lexema+" "+identificador.tipo+" "+identificador.valor);
                sintactico.TablaId.add(identificador);
            }
        }
        if(VariablesEnsamblador.mientras_activado!=0){
             //WHILE
        }
/*
       ErrorGrafo.tipo_error=1;
       ErrorGrafo e=new ErrorGrafo();
       e.setVisible(true); 
*/
    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // asignacion ::= Identificador igual variable 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
        if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
            Identificador identificador = new Identificador(id,"variable","asignacion",null);
            System.out.println("  "+identificador.lexema+" "+identificador.tipo);
            sintactico.TablaId.add(identificador);
        }
        if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                Identificador identificador = new Identificador(id,"variable","asignacion",null);
                System.out.println("  "+identificador.lexema+" "+identificador.tipo);
                sintactico.TablaId.add(identificador);
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                Identificador identificador = new Identificador(id,"variable","asignacion",null);
                System.out.println("  "+identificador.lexema+" "+identificador.tipo);
                sintactico.TablaId.add(identificador);
            }
        }
        if(VariablesEnsamblador.mientras_activado!=0){
             //WHILE
        } 

    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // asignacion ::= Identificador igual expresiones fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		
        if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
            IdValor valor=new IdValor(id,VariablesEnsamblador.last,"asignacion");
            System.out.println("  "+VariablesEnsamblador.last);
            Identificador identificador = new Identificador(id,"variable","asignacion",VariablesEnsamblador.last+"");
            VariablesEnsamblador.asignar(id,VariablesEnsamblador.last);
            //VariablesEnsamblador.variables.add(valor);
            sintactico.TablaId.add(identificador);   
        }
        if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                IdValor valor=new IdValor(id,VariablesEnsamblador.last,"asignacion");
                System.out.println("  "+VariablesEnsamblador.last);
                VariablesEnsamblador.asignar(id,VariablesEnsamblador.last);
                //VariablesEnsamblador.variables.add(valor);
                Identificador identificador = new Identificador(id,"variable","asignacion",VariablesEnsamblador.last+"");
                sintactico.TablaId.add(identificador);   
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                IdValor valor=new IdValor(id,VariablesEnsamblador.last,"asignacion");
                System.out.println("  "+VariablesEnsamblador.last);
                VariablesEnsamblador.asignar(id,VariablesEnsamblador.last);
                Identificador identificador = new Identificador(id,"variable","asignacion",VariablesEnsamblador.last+"");
                //VariablesEnsamblador.variables.add(valor);
                sintactico.TablaId.add(identificador);   
            }
        }
        if(VariablesEnsamblador.mientras_activado!=0){
             //WHILE
        } 
                
    
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // asignacion ::= error fin_linea 
            {
              Object RESULT =null;
		
/*
   ErrorGrafo.tipo_error=5;
   ErrorGrafo e=new ErrorGrafo();
   e.setVisible(true); 
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("asignacion",2, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // metodo_definicion ::= funcion Identificador parentesis_abierto parentesis_cerrado delimitador_izquierdo cuerpo delimitador_derecho 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		  
                            //Tablas.addIdentificador();
                            //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
                            Identificador identificador = new Identificador(id,"metodo","definicion","null");
                            System.out.println(" "+identificador.lexema+" "+identificador.tipo);
                            sintactico.TablaId.add(identificador);
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // metodo_definicion ::= funcion Identificador parentesis_abierto parentesis_cerrado delimitador_izquierdo delimitador_derecho 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)).value;
		  
                            //Tablas.addIdentificador();
                            //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
                            Identificador identificador = new Identificador(id,"metodo","definicion","null");
                            System.out.println(" "+identificador.lexema+" "+identificador.tipo);
                            sintactico.TablaId.add(identificador);
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // metodo_definicion ::= error Identificador 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // metodo_definicion ::= error parentesis_abierto 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // metodo_definicion ::= error parentesis_cerrado 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // metodo_definicion ::= error delimitador_izquierdo 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // metodo_definicion ::= error delimitador_derecho 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_definicion",16, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // metodo_llamada ::= Identificador parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		  
                            Identificador identificador = new Identificador(id,"metodo","llamada","null");
                            System.out.println(" "+identificador.lexema+" "+identificador.tipo);
                            sintactico.TablaId.add(identificador);
                        
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_llamada",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // metodo_llamada ::= funcion_principal parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_llamada",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // metodo_llamada ::= error sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("metodo_llamada",17, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // cuerpo ::= sentencias 
            {
              Object RESULT =null;
		


              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo",13, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // sentencias ::= sentencias sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // sentencias ::= sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencias",24, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // cuerpo_parametro ::= parametros Identificador 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_parametro",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // cuerpo_parametro ::= Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
    IdValor aux=VariablesEnsamblador.buscar(id1,"asignacion");
    if(aux==null){
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no tiene valor asignado.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }else{
        VariablesEnsamblador.last=aux.valor;
    }    

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_parametro",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // cuerpo_parametro ::= Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
    VariablesEnsamblador.last=Integer.parseInt(n);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_parametro",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // cuerpo_parametro ::= expresiones 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_parametro",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // cuerpo_parametro ::= error sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("cuerpo_parametro",25, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // parametros ::= Identificador separador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
    IdValor aux=VariablesEnsamblador.buscar(id1,"asignacion");
    if(aux==null){
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no tiene valor asignado.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }else{
        VariablesEnsamblador.last=aux.valor;
    }    

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // parametros ::= Numero separador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
    VariablesEnsamblador.last=Integer.parseInt(n);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // parametros ::= Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
    IdValor aux=VariablesEnsamblador.buscar(id1,"asignacion");
    if(aux==null){
        Editor.arrayError.add(new ErrorLink("[Error semantico] La variable "+id1+" no tiene valor asignado.","columna:"+(id1left+1)+", fila:"+(id1right+1),(id1right+1),(id1left+1),id1));
        Editor.errores++;
    }else{
        VariablesEnsamblador.last=aux.valor;
    }    

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // parametros ::= Numero 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
    VariablesEnsamblador.last=Integer.parseInt(n);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // parametros ::= error sentencia 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("parametros",38, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // sentencia ::= metodo_definicion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // sentencia ::= metodo_llamada 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // sentencia ::= asignacion 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // sentencia ::= control_mientras 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // sentencia ::= control_si 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // sentencia ::= funcion_principal 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("sentencia",23, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // funcion_principal ::= mencenderVSort 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // funcion_principal ::= mapagarVSort 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // funcion_principal ::= mespera 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // funcion_principal ::= mavanzarSin 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // funcion_principal ::= mavanzarCon 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // funcion_principal ::= mreversaSin 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // funcion_principal ::= mreversaCon 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // funcion_principal ::= mgirarIzquierda 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // funcion_principal ::= mgirarDerecha 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // funcion_principal ::= msubirBase 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // funcion_principal ::= mbajarBase 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // funcion_principal ::= mavanzarRueda 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("funcion_principal",14, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // mencenderVSort ::= encenderVSort parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
/*
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add(";call encender");

    }   
    if(VariablesEnsamblador.si_activado!=0){
        VariablesEnsamblador.llamadas_si.add(";call encender");
    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("EncenderVSort","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.encender==0){
        Generador.gc(Generador.ENCENDER,null, null, VariablesEnsamblador.varSi);
    }
*/

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mencenderVSort",26, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // mapagarVSort ::= apagarVSort parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		 
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        System.out.println("Palabra SI: "+VariablesEnsamblador.palabra_si+" Respuesta: "+VariablesEnsamblador.respuesta_si);
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
        }

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }

    Identificador identificador = new Identificador("ApagarVSort","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mapagarVSort",27, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // mespera ::= espera parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		 
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call espera");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call espera");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call espera");
        }
    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("Espera","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }


              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mespera",37, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // mavanzarSin ::= avanzar parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		

if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call avanzar");
    }
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call avanzar");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call avanzar");
        }
    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("Avanzar","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.avanzar==0){
        Generador.gc(Generador.AVANZAR,null,null,null);
        Editor.avanzar++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }
  
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mavanzarSin",29, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // mavanzarCon ::= avanzar parentesis_abierto cuerpo_parametro parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call avanzar");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call avanzar");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call avanzar");
        }

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("Avanzar","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.avanzar==0){
        Generador.gc(Generador.AVANZAR_CASILLAS,VariablesEnsamblador.last+"",null,null);
        Editor.avanzar++;
    }
    for(int i=0;i<VariablesEnsamblador.last;i++){
        if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
            VariablesEnsamblador.llamadas.add("call espera");
        }   
        if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                VariablesEnsamblador.llamadas_si.add("call espera");
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                VariablesEnsamblador.llamadas_si.add("call espera");
            }      
        }
        if(VariablesEnsamblador.mientras_activado!=0){
            //WHILE
        }
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mavanzarCon",28, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // mreversaSin ::= reversa parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		 
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call reversa");
    }   
    if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call reversa");
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call reversa");
            }      

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("Reversa","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.reversa==0){
        Generador.gc(Generador.REVERSA,null,null,null);
        Editor.reversa++;
    }
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mreversaSin",31, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // mreversaCon ::= reversa parentesis_abierto cuerpo_parametro parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call reversa");
    }   
    if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call reversa");
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call reversa");
            }      
    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("Reversa","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.reversa==0){
        Generador.gc(Generador.REVERSA_CASILLAS,VariablesEnsamblador.last+"",null,null);
        Editor.reversa++;
    }   
    for(int i=0;i<VariablesEnsamblador.last;i++){
        if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
            VariablesEnsamblador.llamadas.add("call espera");
        }   
        if(VariablesEnsamblador.si_activado!=0){
            VariablesEnsamblador.llamadas_si.add("call espera");
        }
        if(VariablesEnsamblador.mientras_activado!=0){
            //WHILE
        }
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mreversaCon",30, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-4)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // mgirarIzquierda ::= girarIzquierda parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call izquierda");
    }   
    if(VariablesEnsamblador.si_activado!=0){
            if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call izquierda");
            }
            if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
                VariablesEnsamblador.llamadas_si.add("call apagar");
                VariablesEnsamblador.llamadas_si.add("call espera");
                VariablesEnsamblador.llamadas_si.add("call izquierda");
            } 

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("GirarIzquierda","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }
    if(Editor.girarI==0){
        Generador.gc(Generador.GIRAR_IZQUIERDA,null,null,null);
        Editor.girarI++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mgirarIzquierda",32, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // mgirarDerecha ::= girarDerecha parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call derecha");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call derecha");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call derecha");
        } 

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("GirarDerecha","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.girarD==0){
        Generador.gc(Generador.GIRAR_DERECHA,null,null,null);
        Editor.girarD++;
    }
 
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mgirarDerecha",33, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // msubirBase ::= subirBase parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call baseup");
        VariablesEnsamblador.llamadas.add("call retardoSB");
        VariablesEnsamblador.llamadas.add("call apagarbase");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call baseup");
            VariablesEnsamblador.llamadas_si.add("call retardoSB");
            VariablesEnsamblador.llamadas_si.add("call apagarbase");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call baseup");
            VariablesEnsamblador.llamadas_si.add("call retardoSB");
            VariablesEnsamblador.llamadas_si.add("call apagarbase");
        } 

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("SubirBase","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.subir==0){
        Generador.gc(Generador.SUBIR_BASE,null,null,null);
        Editor.subir++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("msubirBase",34, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // mbajarBase ::= bajarBase parentesis_abierto parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		
    if(VariablesEnsamblador.si_activado==0&&VariablesEnsamblador.mientras_activado==0){
        VariablesEnsamblador.llamadas.add("call apagar");
        VariablesEnsamblador.llamadas.add("call espera");
        VariablesEnsamblador.llamadas.add("call basedown");
        VariablesEnsamblador.llamadas.add("call retardoBB");
        VariablesEnsamblador.llamadas.add("call apagarbase");
    }   
    if(VariablesEnsamblador.si_activado!=0){
        if(VariablesEnsamblador.palabra_si&&VariablesEnsamblador.respuesta_si){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call basedown");
            VariablesEnsamblador.llamadas_si.add("call retardoSB");
            VariablesEnsamblador.llamadas_si.add("call apagarbase");
        }
        if(VariablesEnsamblador.palabra_si==false&&VariablesEnsamblador.respuesta_si==false){
            VariablesEnsamblador.llamadas_si.add("call apagar");
            VariablesEnsamblador.llamadas_si.add("call espera");
            VariablesEnsamblador.llamadas_si.add("call basedown");
            VariablesEnsamblador.llamadas_si.add("call retardoSB");
            VariablesEnsamblador.llamadas_si.add("call apagarbase");
        } 

    }
    if(VariablesEnsamblador.mientras_activado!=0){
        //WHILE
    }
    Identificador identificador = new Identificador("BajarBase","palabra_reservada","llamada","null");
    sintactico.TablaId.add(identificador);
    if(Editor.espera==0){
        Generador.gc(Generador.ESPERA,null,null,null);
        Editor.espera++;
    }
    if(Editor.bajar==0){
        Generador.gc(Generador.BAJAR_BASE,null,null,null);
        Editor.bajar++;
    }
    if(Editor.apagar==0){
        Generador.gc(Generador.APAGAR,null,null,null); 
        Editor.apagar++;
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mbajarBase",35, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // mavanzarRueda ::= Identificador punto avanzarRueda parentesis_abierto cuerpo_parametro parentesis_cerrado fin_linea 
            {
              Object RESULT =null;
		 Generador.gc(Generador.AVANZAR_RUEDA,null,null,null);
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("mavanzarRueda",36, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // defRueda ::= rueda Identificador separador Identificador separador Identificador separador Identificador fin_linea 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)).value;
		int id3left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).left;
		int id3right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).right;
		String id3 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)).value;
		int id4left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int id4right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id4 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
    Identificador identificador1 = new Identificador(id1,"variable","declaracion","RSD");
    Identificador identificador2 = new Identificador(id2,"variable","declaracion","RID");
    Identificador identificador3 = new Identificador(id3,"variable","declaracion","RII");
    Identificador identificador4 = new Identificador(id4,"variable","declaracion","RSI");
    sintactico.TablaId.add(identificador1);
    sintactico.TablaId.add(identificador2);  
    sintactico.TablaId.add(identificador3);
    sintactico.TablaId.add(identificador4);
    Generador.gc(Generador.DEC_RUEDAS,id1+","+id2+","+id3+","+id4,null,null);
    VariablesEnsamblador.ruedas.add(id1);
    VariablesEnsamblador.ruedas.add(id2);
    VariablesEnsamblador.ruedas.add(id3);
    VariablesEnsamblador.ruedas.add(id4);    
    //System.out.println(VariablesEnsamblador.ruedas.size()-1);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defRueda",39, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-8)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // defBase ::= base Identificador fin_linea 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
    Identificador identificador1 = new Identificador(id1,"variable","declaracion","BASE");
    sintactico.TablaId.add(identificador1);
    Generador.gc(Generador.DEC_BASE,id1,null,null);
    Editor.base++;
    if(Editor.base>1){
        //Editor.txtConsola.append("[Semantic Error] No puede haber mas de una base registrada.");
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defBase",40, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // defSensor ::= sensorProximidad Identificador fin_linea 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		
    Identificador identificador1 = new Identificador(id1,"variable","declaracion","SENSOR_PROX");
    sintactico.TablaId.add(identificador1);
    Generador.gc(Generador.DEC_SENSOR_PROXIMIDAD,id1,null,null);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("defSensor",41, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // control_si ::= si parentesis_abierto condicion_si parentesis_cerrado delimitador_izquierdo cuerpo delimitador_derecho 
            {
              Object RESULT =null;
		


    //*****************************
    if(VariablesEnsamblador.si){
       Generador.gc(Generador.SI,null,null,VariablesEnsamblador.varSi);
       VariablesEnsamblador.si_activado=1;
       VariablesEnsamblador.llamadas.add("call "+VariablesEnsamblador.varSi);
    }
    VariablesEnsamblador.si_activado=0;
    VariablesEnsamblador.llamadas_si.clear();
    //*****************************

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_si",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // control_si ::= si parentesis_abierto condicion_si parentesis_cerrado delimitador_izquierdo cuerpo delimitador_derecho control_sino 
            {
              Object RESULT =null;
		
    //*****************************
    if(VariablesEnsamblador.si){
       Generador.gc(Generador.SI,null,null,VariablesEnsamblador.varSi);
       VariablesEnsamblador.si_activado=1;
       VariablesEnsamblador.llamadas.add("call "+VariablesEnsamblador.varSi);
    }
    VariablesEnsamblador.si_activado=0;
    //*****************************

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_si",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-7)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // control_si ::= si parentesis_abierto condicion_si parentesis_cerrado delimitador_izquierdo delimitador_derecho 
            {
              Object RESULT =null;
		
    //*****************************
    if(VariablesEnsamblador.si){
        
    }else{

    }
    VariablesEnsamblador.si_activado=0;
    //*****************************

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_si",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // control_si ::= si parentesis_abierto condicion_si parentesis_cerrado delimitador_izquierdo delimitador_derecho control_sino 
            {
              Object RESULT =null;
		
    //*****************************
    if(VariablesEnsamblador.si){

    }else{

    }
    VariablesEnsamblador.si_activado=0;
    //*****************************

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_si",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // control_si ::= error Numero 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_si",10, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // control_sino ::= sino delimitador_izquierdo cuerpo delimitador_derecho 
            {
              Object RESULT =null;
		
    if(!VariablesEnsamblador.si){
       Generador.gc(Generador.SI,null,null,VariablesEnsamblador.varSi);
       VariablesEnsamblador.si_activado=1;
       VariablesEnsamblador.llamadas.add("call "+VariablesEnsamblador.varSi);
    }
    VariablesEnsamblador.si_activado=0;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_sino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-3)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // control_sino ::= sino delimitador_izquierdo delimitador_derecho 
            {
              Object RESULT =null;
		


              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_sino",11, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // condicion_si ::= Identificador operador_logico Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
   if(Editor.estructura_si>0){
    Editor.elementosPila.add("condicion");
    }

    IdValor aux=VariablesEnsamblador.buscar(id1,"llamada");
    IdValor aux2=VariablesEnsamblador.buscar(id2,"llamada");
    if(aux!=null&&aux2!=null){
        Identificador identificador1 = new Identificador(id1,"variable","llamada",""+aux.valor);
        Identificador identificador2 = new Identificador(id2,"variable","llamada",""+aux2.valor);
        sintactico.TablaId.add(identificador1);
        sintactico.TablaId.add(identificador2); 
        if(VariablesEnsamblador.condicion(VariablesEnsamblador.opLog,aux.valor,aux2.valor)){
            VariablesEnsamblador.si=true;
            VariablesEnsamblador.respuesta_si=true;
            VariablesEnsamblador.si_activado=1;
        }else{
            VariablesEnsamblador.si=false;
            VariablesEnsamblador.respuesta_si=false;
            VariablesEnsamblador.si_activado=2;
        }
        String t=Generador.nuevaTemp();
        VariablesEnsamblador.varSi=t;
        String val=aux.valor+VariablesEnsamblador.opLog+aux2.valor+","+VariablesEnsamblador.si;
        Identificador identificadorCon=new Identificador(t,"estructura_si","definicion",val);
        sintactico.TablaId.add(identificadorCon);
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion_si",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // condicion_si ::= Numero operador_logico Numero 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String n1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int n2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int n2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		
    if(VariablesEnsamblador.condicion(VariablesEnsamblador.opLog,Integer.parseInt(n1),Integer.parseInt(n2))){
        VariablesEnsamblador.si=true;
        VariablesEnsamblador.respuesta_si=true;
        VariablesEnsamblador.si_activado=1;
    }else{
        VariablesEnsamblador.respuesta_si=false;
        VariablesEnsamblador.si=false;
        VariablesEnsamblador.si_activado=1;
    }
    String t=Generador.nuevaTemp();
    VariablesEnsamblador.varSi=t;
    String val=n1+VariablesEnsamblador.opLog+n2+","+VariablesEnsamblador.si;
    Identificador identificadorCon=new Identificador(t,"estructura_si","definicion",val);
    sintactico.TablaId.add(identificadorCon);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion_si",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // condicion_si ::= Identificador operador_logico Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
    IdValor aux=VariablesEnsamblador.buscar(id,"llamada");
    if(aux!=null){
        Identificador identificador1 = new Identificador(id,"variable","llamada",""+aux.valor);
        sintactico.TablaId.add(identificador1);
        if(VariablesEnsamblador.condicion(VariablesEnsamblador.opLog,aux.valor,Integer.parseInt(n))){
            VariablesEnsamblador.si=true;
            VariablesEnsamblador.respuesta_si=true;
            VariablesEnsamblador.si_activado=1;
        }else{
            VariablesEnsamblador.respuesta_si=false;
            VariablesEnsamblador.si_activado=1;
            VariablesEnsamblador.si=false;
        }               
        String t=Generador.nuevaTemp();
        VariablesEnsamblador.varSi=t;
        String val=aux.valor+VariablesEnsamblador.opLog+n+","+VariablesEnsamblador.si;
        Identificador identificadorCon=new Identificador(t,"estructura_si","definicion",val);
        sintactico.TablaId.add(identificadorCon);
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion_si",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // condicion_si ::= Numero operador_logico Identificador 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
    IdValor aux=VariablesEnsamblador.buscar(id,"llamada");
    if(aux!=null){
        Identificador identificador1 = new Identificador(id,"variable","llamada",""+aux.valor);
        sintactico.TablaId.add(identificador1);
        if(VariablesEnsamblador.condicion(VariablesEnsamblador.opLog,Integer.parseInt(n),aux.valor)){
            VariablesEnsamblador.si=true;
            VariablesEnsamblador.respuesta_si=true;
            VariablesEnsamblador.si_activado=1;
        }else{
            VariablesEnsamblador.si=false;
            VariablesEnsamblador.respuesta_si=true;
            VariablesEnsamblador.si_activado=1;
        }               
        String t=Generador.nuevaTemp();
        VariablesEnsamblador.varSi=t;
        String val=n+VariablesEnsamblador.opLog+aux.valor+","+VariablesEnsamblador.si;
        Identificador identificadorCon=new Identificador(t,"estructura_si","definicion",val);
        sintactico.TablaId.add(identificadorCon);
    }

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion_si",7, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // condicion ::= Identificador operador_logico Identificador 
            {
              Object RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id1 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		int oplleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).left;
		int oplright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).right;
		Object opl = (Object)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-1)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String id2 = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		  
                    
                    //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null);
                    IdValor aux=VariablesEnsamblador.buscar(id1,"llamada");
                    IdValor aux2=VariablesEnsamblador.buscar(id2,"llamada");
                    if(aux!=null&&aux2!=null){
                        if(VariablesEnsamblador.condicion(VariablesEnsamblador.opLog,aux.valor,aux2.valor)){
                        
                        }else{
                        
                        } 
                    }
                    Identificador identificador1 = new Identificador(id1,"variable","llamada","null");
                    Identificador identificador2 = new Identificador(id2,"variable","llamada","null");
                    sintactico.TablaId.add(identificador1);
                    sintactico.TablaId.add(identificador2); 
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // condicion ::= Numero operador_logico Numero 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // condicion ::= Identificador operador_logico Numero 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)).value;
		  
                    //Generador.gc(Generador.NVAR, DataTabla.getLexema(), null, null); 
                    Identificador identificador = new Identificador(id,"variable","llamada","null");
                    sintactico.TablaId.add(identificador);  
                
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // condicion ::= Numero operador_logico Identificador 
            {
              Object RESULT =null;

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("condicion",8, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-2)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // control_mientras ::= mientras parentesis_abierto condicion parentesis_cerrado delimitador_izquierdo cuerpo delimitador_derecho 
            {
              Object RESULT =null;
		


              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_mientras",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-6)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // control_mientras ::= mientras parentesis_abierto condicion parentesis_cerrado delimitador_izquierdo delimitador_derecho 
            {
              Object RESULT =null;
		
    Generador.gc(Generador.MIENTRAS_SIN,null,null,null);

              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("control_mientras",12, ((java_cup.runtime.Symbol)CUP$sintactico$stack.elementAt(CUP$sintactico$top-5)), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // operador_logico ::= igual 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // operador_logico ::= diferente_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // operador_logico ::= mayor_igual_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // operador_logico ::= igual_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // operador_logico ::= menor_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // operador_logico ::= mayor_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // operador_logico ::= menor_igual_que 
            {
              Object RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$sintactico$stack.peek()).value;
		VariablesEnsamblador.opLog=o;
              CUP$sintactico$result = parser.getSymbolFactory().newSymbol("operador_logico",9, ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), ((java_cup.runtime.Symbol)CUP$sintactico$stack.peek()), RESULT);
            }
          return CUP$sintactico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$sintactico$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$sintactico$do_action(
    int                        CUP$sintactico$act_num,
    java_cup.runtime.lr_parser CUP$sintactico$parser,
    java.util.Stack            CUP$sintactico$stack,
    int                        CUP$sintactico$top)
    throws java.lang.Exception
    {
              return CUP$sintactico$do_action_part00000000(
                               CUP$sintactico$act_num,
                               CUP$sintactico$parser,
                               CUP$sintactico$stack,
                               CUP$sintactico$top);
    }
}

}
