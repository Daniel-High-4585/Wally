/* The following code was generated by JFlex 1.4.3 on 12/6/19 12:36 PM */

package clases;

import static clases.Tokens.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import ventanas.Editor;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 12/6/19 12:36 PM from the specification file
 * <tt>C:/projects/Lenguaje_Automatas_II/Compilador/src/clases/Lexer.flex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\3\2\0\1\3\22\0\1\4\1\13\1\5\5\0"+
    "\1\22\1\23\1\16\1\14\1\6\1\15\1\7\1\17\12\2\1\54"+
    "\1\24\1\11\1\10\1\12\2\0\1\31\1\32\1\42\1\30\1\27"+
    "\1\43\1\47\1\51\1\40\1\52\1\1\1\53\1\41\1\34\1\35"+
    "\1\36\1\50\1\25\1\33\1\44\1\26\1\45\1\1\1\37\1\1"+
    "\1\46\4\0\1\105\1\0\1\62\1\63\1\73\1\61\1\60\1\74"+
    "\1\100\1\102\1\71\1\103\1\55\1\104\1\72\1\65\1\66\1\67"+
    "\1\101\1\56\1\64\1\75\1\57\1\76\1\55\1\70\1\55\1\77"+
    "\1\20\1\0\1\21\uff82\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\2\2\1\1\2\3\1\2\1\4\1\5\1\6"+
    "\1\7\1\10\1\2\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\15\2\16\22\1\23\2\0"+
    "\1\24\1\25\1\26\1\27\1\30\2\0\2\23\2\0"+
    "\2\23\2\0\2\23\1\0\1\23\2\0\1\31\2\23"+
    "\1\31\1\0\1\23\1\0\1\23\1\0\1\23\4\0"+
    "\4\23\2\0\2\23\1\0\1\23\1\0\1\23\1\0"+
    "\1\23\22\22\1\31\2\22\1\31\30\22\1\24\2\0"+
    "\2\23\2\0\2\23\2\0\2\23\2\0\2\23\3\0"+
    "\3\23\2\32\1\0\1\23\1\0\1\23\3\0\3\23"+
    "\2\0\2\23\1\0\1\23\1\0\1\23\1\0\1\23"+
    "\42\22\3\32\36\22\2\0\2\23\2\0\2\23\2\0"+
    "\2\23\1\33\1\0\1\33\1\23\2\0\1\34\2\23"+
    "\1\34\1\0\1\23\1\0\1\23\3\0\3\23\1\0"+
    "\1\23\1\0\1\23\1\0\1\23\22\22\2\33\2\22"+
    "\1\33\5\22\2\34\2\22\1\34\30\22\1\35\1\0"+
    "\1\35\1\23\2\0\2\23\2\0\2\23\1\0\1\23"+
    "\2\0\2\23\1\0\1\23\1\0\1\23\1\0\1\23"+
    "\1\0\1\23\1\0\1\23\1\0\1\23\2\35\2\22"+
    "\1\35\50\22\1\0\1\23\1\36\1\0\1\36\1\23"+
    "\2\0\2\23\1\0\1\23\2\0\2\23\2\37\1\0"+
    "\1\23\1\0\1\23\1\0\1\23\1\0\1\23\2\0"+
    "\2\23\3\22\2\36\2\22\1\36\20\22\3\37\22\22"+
    "\2\40\1\0\1\23\1\0\1\41\1\23\1\41\1\0"+
    "\1\23\2\0\2\23\1\0\1\23\1\0\1\23\2\42"+
    "\1\0\1\23\2\0\2\23\3\40\5\22\2\41\1\22"+
    "\1\41\17\22\3\42\11\22\1\0\1\23\2\0\2\23"+
    "\1\0\1\23\2\0\2\23\2\43\1\0\1\23\2\0"+
    "\2\23\22\22\3\43\11\22\1\0\1\23\2\0\2\23"+
    "\2\44\1\45\1\0\1\45\1\23\2\0\2\23\11\22"+
    "\3\44\2\45\2\22\1\45\7\22\1\0\1\23\2\0"+
    "\2\23\1\0\1\23\2\0\2\23\22\22\1\0\1\23"+
    "\1\46\1\0\1\46\1\23\1\0\1\23\2\0\2\23"+
    "\3\22\2\46\2\22\1\46\12\22\1\0\1\23\2\47"+
    "\1\0\1\23\2\50\3\22\3\47\3\22\3\50\2\51"+
    "\1\0\1\23\3\51\3\22\1\0\1\23\3\22\1\0"+
    "\1\23\3\22\5\52";

  private static int [] zzUnpackAction() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\106"+
    "\0\106\0\u01ea\0\u0230\0\u0276\0\u02bc\0\106\0\106\0\106"+
    "\0\106\0\106\0\106\0\106\0\106\0\106\0\u0302\0\u0348"+
    "\0\u038e\0\u03d4\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578"+
    "\0\u05be\0\u0604\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8"+
    "\0\u07ee\0\u0834\0\u087a\0\u08c0\0\u0906\0\u094c\0\u0992\0\u09d8"+
    "\0\u0a1e\0\214\0\214\0\u0a64\0\u01a4\0\106\0\106\0\106"+
    "\0\106\0\u0aaa\0\u0af0\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e"+
    "\0\u0c94\0\u0cda\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e"+
    "\0\u0ec4\0\u0f0a\0\u0f50\0\u0f96\0\u0fdc\0\u1022\0\u1068\0\u10ae"+
    "\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c\0\u1252\0\u1298\0\u12de"+
    "\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c\0\u1482\0\u14c8\0\u150e"+
    "\0\u1554\0\u159a\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e"+
    "\0\u1784\0\u17ca\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e"+
    "\0\u19b4\0\u19fa\0\u1a40\0\u1a86\0\u1acc\0\u1b12\0\u1b58\0\u1b9e"+
    "\0\u1be4\0\u1c2a\0\u1c70\0\u1cb6\0\u1cfc\0\u1d42\0\u1d88\0\u1dce"+
    "\0\u1e14\0\u1e5a\0\u1ea0\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\u23d2\0\u2418\0\u245e"+
    "\0\u24a4\0\u24ea\0\u2530\0\u2576\0\u25bc\0\u2602\0\u2648\0\u268e"+
    "\0\u26d4\0\u271a\0\u2760\0\u27a6\0\u27ec\0\u2832\0\u2878\0\u28be"+
    "\0\u2904\0\u294a\0\106\0\214\0\u2990\0\u29d6\0\u2a1c\0\u2a62"+
    "\0\u2aa8\0\u2aee\0\u2b34\0\u2b7a\0\u2bc0\0\u2c06\0\u2c4c\0\u2c92"+
    "\0\u2cd8\0\u2d1e\0\u2d64\0\u2daa\0\u2df0\0\u2e36\0\u2e7c\0\u2ec2"+
    "\0\u2f08\0\u2f4e\0\u2f94\0\u2fda\0\u3020\0\u3066\0\u30ac\0\u30f2"+
    "\0\u3138\0\u317e\0\u31c4\0\u320a\0\u3250\0\u3296\0\u32dc\0\u3322"+
    "\0\u3368\0\u33ae\0\u33f4\0\u343a\0\u3480\0\u34c6\0\u350c\0\u3552"+
    "\0\u3598\0\u35de\0\u3624\0\u366a\0\u36b0\0\u36f6\0\u373c\0\u3782"+
    "\0\u37c8\0\u380e\0\u16b2\0\u2f08\0\u0690\0\u3854\0\u389a\0\u38e0"+
    "\0\u3926\0\u396c\0\u39b2\0\u39f8\0\u3a3e\0\u3a84\0\u3aca\0\u3b10"+
    "\0\u3b56\0\u3b9c\0\u3be2\0\u3c28\0\u3c6e\0\u3cb4\0\u3cfa\0\u3d40"+
    "\0\u3d86\0\u3dcc\0\u3e12\0\u3e58\0\u3e9e\0\u3ee4\0\u3f2a\0\u3f70"+
    "\0\u3fb6\0\u3ffc\0\u4042\0\u4088\0\u40ce\0\u4114\0\u415a\0\u41a0"+
    "\0\u41e6\0\u422c\0\u4272\0\u42b8\0\u42fe\0\u4344\0\u438a\0\106"+
    "\0\u43d0\0\214\0\u4416\0\u445c\0\u44a2\0\106\0\u44e8\0\u452e"+
    "\0\214\0\u4574\0\u45ba\0\u4600\0\u4646\0\u468c\0\u46d2\0\u4718"+
    "\0\u475e\0\u47a4\0\u47ea\0\u4830\0\u4876\0\u48bc\0\u4902\0\u4948"+
    "\0\u498e\0\u49d4\0\u4a1a\0\u4a60\0\u4aa6\0\u4aec\0\u4b32\0\u4b78"+
    "\0\u4bbe\0\u4c04\0\u4c4a\0\u4c90\0\u4cd6\0\u4d1c\0\u4d62\0\u4da8"+
    "\0\u4dee\0\u4e34\0\u4e7a\0\u16b2\0\u2f08\0\u4ec0\0\u4f06\0\u0690"+
    "\0\u4f4c\0\u4f92\0\u4fd8\0\u501e\0\u5064\0\u16b2\0\u2f08\0\u50aa"+
    "\0\u50f0\0\u0690\0\u5136\0\u517c\0\u51c2\0\u5208\0\u524e\0\u5294"+
    "\0\u52da\0\u5320\0\u5366\0\u53ac\0\u53f2\0\u5438\0\u547e\0\u54c4"+
    "\0\u550a\0\u5550\0\u5596\0\u55dc\0\u5622\0\u5668\0\u56ae\0\u56f4"+
    "\0\u573a\0\u5780\0\106\0\u57c6\0\214\0\u580c\0\u5852\0\u5898"+
    "\0\u58de\0\u5924\0\u596a\0\u59b0\0\u59f6\0\u5a3c\0\u5a82\0\u5ac8"+
    "\0\u5b0e\0\u5b54\0\u5b9a\0\u5be0\0\u5c26\0\u5c6c\0\u5cb2\0\u5cf8"+
    "\0\u5d3e\0\u5d84\0\u5dca\0\u5e10\0\u5e56\0\u5e9c\0\u5ee2\0\u5f28"+
    "\0\u16b2\0\u2f08\0\u5f6e\0\u5fb4\0\u0690\0\u5ffa\0\u6040\0\u6086"+
    "\0\u60cc\0\u6112\0\u6158\0\u619e\0\u61e4\0\u622a\0\u6270\0\u62b6"+
    "\0\u62fc\0\u6342\0\u6388\0\u63ce\0\u6414\0\u645a\0\u64a0\0\u64e6"+
    "\0\u652c\0\u6572\0\u65b8\0\u65fe\0\u6644\0\u668a\0\u66d0\0\u6716"+
    "\0\u675c\0\u67a2\0\u67e8\0\u682e\0\u6874\0\u68ba\0\u6900\0\u6946"+
    "\0\u698c\0\u69d2\0\u6a18\0\u6a5e\0\u6aa4\0\u6aea\0\u6b30\0\106"+
    "\0\u6b76\0\214\0\u6bbc\0\u6c02\0\u6c48\0\u6c8e\0\u6cd4\0\u6d1a"+
    "\0\u6d60\0\u6da6\0\u6dec\0\u6e32\0\u6e78\0\106\0\214\0\u6ebe"+
    "\0\u6f04\0\u6f4a\0\u6f90\0\u6fd6\0\u701c\0\u7062\0\u70a8\0\u70ee"+
    "\0\u7134\0\u717a\0\u71c0\0\u7206\0\u724c\0\u7292\0\u16b2\0\u2f08"+
    "\0\u72d8\0\u731e\0\u0690\0\u7364\0\u73aa\0\u73f0\0\u7436\0\u747c"+
    "\0\u74c2\0\u7508\0\u754e\0\u7594\0\u75da\0\u7620\0\u7666\0\u76ac"+
    "\0\u76f2\0\u7738\0\u777e\0\u16b2\0\u2f08\0\u0690\0\u77c4\0\u780a"+
    "\0\u7850\0\u7896\0\u78dc\0\u7922\0\u7968\0\u79ae\0\u79f4\0\u7a3a"+
    "\0\u7a80\0\u7ac6\0\u7b0c\0\u7b52\0\u7b98\0\u7bde\0\u7c24\0\u7c6a"+
    "\0\106\0\214\0\u7cb0\0\u7cf6\0\u7d3c\0\u7d82\0\u7dc8\0\u7e0e"+
    "\0\u7e54\0\u7e9a\0\u7ee0\0\u7f26\0\u7f6c\0\u7fb2\0\u7ff8\0\u803e"+
    "\0\u8084\0\u80ca\0\106\0\214\0\u8110\0\u8156\0\u819c\0\u81e2"+
    "\0\u8228\0\u826e\0\u16b2\0\u2f08\0\u0690\0\u82b4\0\u82fa\0\u8340"+
    "\0\u8386\0\u83cc\0\u8412\0\u8458\0\u849e\0\u84e4\0\u852a\0\u8570"+
    "\0\u85b6\0\u85fc\0\u8642\0\u8688\0\u86ce\0\u8714\0\u875a\0\u87a0"+
    "\0\u87e6\0\u882c\0\u8872\0\u88b8\0\u88fe\0\u16b2\0\u2f08\0\u0690"+
    "\0\u8944\0\u898a\0\u89d0\0\u8a16\0\u8a5c\0\u8aa2\0\u8ae8\0\u8b2e"+
    "\0\u8b74\0\u8bba\0\u8c00\0\u8c46\0\u8c8c\0\u8cd2\0\u8d18\0\u8d5e"+
    "\0\u8da4\0\u8dea\0\u8e30\0\u8e76\0\u8ebc\0\106\0\214\0\u8f02"+
    "\0\u8f48\0\u8f8e\0\u8fd4\0\u901a\0\u9060\0\u90a6\0\u90ec\0\u9132"+
    "\0\u9178\0\u91be\0\u9204\0\u924a\0\u9290\0\u92d6\0\u931c\0\u9362"+
    "\0\u93a8\0\u93ee\0\u9434\0\u947a\0\u94c0\0\u9506\0\u954c\0\u16b2"+
    "\0\u2f08\0\u0690\0\u9592\0\u95d8\0\u961e\0\u9664\0\u96aa\0\u96f0"+
    "\0\u9736\0\u977c\0\u97c2\0\u9808\0\u984e\0\u9894\0\u98da\0\u9920"+
    "\0\u9966\0\106\0\214\0\106\0\u99ac\0\214\0\u99f2\0\u9a38"+
    "\0\u9a7e\0\u9ac4\0\u9b0a\0\u9b50\0\u9b96\0\u9bdc\0\u9c22\0\u9c68"+
    "\0\u9cae\0\u9cf4\0\u9d3a\0\u9d80\0\u16b2\0\u2f08\0\u0690\0\u16b2"+
    "\0\u2f08\0\u9dc6\0\u9e0c\0\u0690\0\u9e52\0\u9e98\0\u9ede\0\u9f24"+
    "\0\u9f6a\0\u9fb0\0\u9ff6\0\ua03c\0\ua082\0\ua0c8\0\ua10e\0\ua154"+
    "\0\ua19a\0\ua1e0\0\ua226\0\ua26c\0\ua2b2\0\ua2f8\0\ua33e\0\ua384"+
    "\0\ua3ca\0\ua410\0\ua456\0\ua49c\0\ua4e2\0\ua528\0\ua56e\0\ua5b4"+
    "\0\ua5fa\0\ua640\0\ua686\0\ua6cc\0\ua712\0\ua758\0\ua79e\0\ua7e4"+
    "\0\ua82a\0\ua870\0\ua8b6\0\106\0\ua8fc\0\214\0\ua942\0\ua988"+
    "\0\ua9ce\0\uaa14\0\uaa5a\0\uaaa0\0\uaae6\0\uab2c\0\uab72\0\uabb8"+
    "\0\u16b2\0\u2f08\0\uabfe\0\uac44\0\u0690\0\uac8a\0\uacd0\0\uad16"+
    "\0\uad5c\0\uada2\0\uade8\0\uae2e\0\uae74\0\uaeba\0\uaf00\0\uaf46"+
    "\0\uaf8c\0\106\0\214\0\uafd2\0\ub018\0\106\0\214\0\ub05e"+
    "\0\ub0a4\0\ub0ea\0\u16b2\0\u2f08\0\u0690\0\ub130\0\ub176\0\ub1bc"+
    "\0\u16b2\0\u2f08\0\u0690\0\106\0\214\0\ub202\0\ub248\0\u16b2"+
    "\0\u2f08\0\u0690\0\ub28e\0\ub2d4\0\ub31a\0\ub360\0\ub3a6\0\ub3ec"+
    "\0\ub432\0\ub478\0\ub4be\0\ub504\0\ub54a\0\ub590\0\ub5d6\0\106"+
    "\0\214\0\u16b2\0\u2f08\0\u0690";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\3\1\30"+
    "\1\3\1\31\1\32\1\33\1\34\3\3\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\3\1\43\4\3\1\2"+
    "\1\44\1\45\1\44\1\46\1\44\1\47\1\50\1\51"+
    "\1\52\3\44\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\44\1\61\4\44\1\3\110\0\1\62\52\0\30\62"+
    "\3\0\1\4\106\0\2\5\102\0\1\63\1\0\2\5"+
    "\20\0\27\63\1\0\30\44\1\63\1\0\4\64\1\65"+
    "\1\64\6\0\1\64\1\0\1\64\5\0\60\64\11\0"+
    "\1\66\105\0\1\67\105\0\1\70\105\0\1\71\77\0"+
    "\1\62\23\0\1\72\1\73\25\0\2\62\1\74\1\75"+
    "\24\62\3\0\1\62\30\0\1\76\1\77\20\0\7\62"+
    "\1\100\1\101\17\62\3\0\1\62\33\0\1\102\6\0"+
    "\1\103\7\0\12\62\1\104\6\62\1\105\6\62\3\0"+
    "\1\62\26\0\1\106\23\0\5\62\1\107\22\62\3\0"+
    "\1\62\23\0\1\110\1\111\10\0\1\112\14\0\2\62"+
    "\1\113\1\114\10\62\1\115\13\62\3\0\1\62\23\0"+
    "\1\116\26\0\2\62\1\117\25\62\3\0\1\62\31\0"+
    "\1\120\20\0\10\62\1\121\17\62\3\0\1\62\35\0"+
    "\1\122\14\0\14\62\1\123\13\62\3\0\1\62\26\0"+
    "\1\124\3\0\1\125\2\0\1\126\12\0\1\127\1\0"+
    "\5\62\1\130\3\62\1\131\2\62\1\132\12\62\1\133"+
    "\3\0\1\62\23\0\1\134\2\0\1\135\23\0\2\62"+
    "\1\136\2\62\1\137\22\62\3\0\1\62\24\0\1\140"+
    "\25\0\3\62\1\141\24\62\3\0\1\62\24\0\1\142"+
    "\25\0\3\62\1\143\24\62\3\0\1\62\35\0\1\144"+
    "\14\0\14\62\1\145\13\62\2\0\1\146\1\147\22\0"+
    "\27\146\1\0\30\44\2\0\1\146\1\147\22\0\1\146"+
    "\1\150\1\151\24\146\1\0\2\44\1\152\1\153\24\44"+
    "\2\0\1\146\1\147\22\0\6\146\1\154\1\155\17\146"+
    "\1\0\7\44\1\156\1\157\17\44\2\0\1\146\1\147"+
    "\22\0\11\146\1\160\6\146\1\161\6\146\1\0\12\44"+
    "\1\162\6\44\1\163\6\44\2\0\1\146\1\147\22\0"+
    "\4\146\1\164\22\146\1\0\5\44\1\165\22\44\2\0"+
    "\1\146\1\147\22\0\1\146\1\166\1\167\10\146\1\170"+
    "\13\146\1\0\2\44\1\171\1\172\10\44\1\173\13\44"+
    "\2\0\1\146\1\147\22\0\1\146\1\174\25\146\1\0"+
    "\2\44\1\175\25\44\2\0\1\146\1\147\22\0\7\146"+
    "\1\176\17\146\1\0\10\44\1\177\17\44\2\0\1\146"+
    "\1\147\22\0\13\146\1\200\13\146\1\0\14\44\1\201"+
    "\13\44\2\0\1\146\1\147\22\0\4\146\1\202\3\146"+
    "\1\203\2\146\1\204\12\146\1\205\1\0\5\44\1\206"+
    "\3\44\1\207\2\44\1\210\12\44\1\211\2\0\1\146"+
    "\1\147\22\0\1\146\1\212\2\146\1\213\22\146\1\0"+
    "\2\44\1\214\2\44\1\215\22\44\2\0\1\146\1\147"+
    "\22\0\2\146\1\216\24\146\1\0\3\44\1\217\24\44"+
    "\2\0\1\146\1\147\22\0\2\146\1\220\24\146\1\0"+
    "\3\44\1\221\24\44\2\0\1\146\1\147\22\0\13\146"+
    "\1\222\13\146\1\0\14\44\1\223\13\44\2\0\4\64"+
    "\1\224\1\64\6\0\1\64\1\0\1\64\5\0\60\64"+
    "\30\0\1\225\30\0\1\225\72\0\1\226\30\0\1\226"+
    "\11\0\1\62\24\0\1\225\25\0\3\62\1\227\24\62"+
    "\3\0\1\62\42\0\1\226\7\0\21\62\1\230\6\62"+
    "\37\0\1\231\30\0\1\231\60\0\1\232\30\0\1\232"+
    "\14\0\1\62\33\0\1\231\16\0\12\62\1\233\15\62"+
    "\3\0\1\62\37\0\1\232\12\0\16\62\1\234\11\62"+
    "\32\0\1\235\30\0\1\235\54\0\1\236\30\0\1\236"+
    "\25\0\1\62\26\0\1\235\23\0\5\62\1\237\22\62"+
    "\3\0\1\62\26\0\1\236\23\0\5\62\1\240\22\62"+
    "\34\0\1\241\16\0\1\242\11\0\1\241\16\0\1\242"+
    "\4\0\1\62\30\0\1\241\16\0\1\242\2\0\7\62"+
    "\1\243\16\62\1\244\1\62\33\0\1\245\30\0\1\245"+
    "\56\0\1\246\30\0\1\246\54\0\1\247\30\0\1\247"+
    "\22\0\1\62\27\0\1\245\22\0\6\62\1\250\21\62"+
    "\3\0\1\62\31\0\1\246\20\0\10\62\1\251\17\62"+
    "\3\0\1\62\31\0\1\247\20\0\10\62\1\252\17\62"+
    "\42\0\1\253\30\0\1\253\15\0\1\62\36\0\1\253"+
    "\13\0\15\62\1\254\12\62\41\0\1\255\30\0\1\255"+
    "\16\0\1\62\35\0\1\255\14\0\14\62\1\256\13\62"+
    "\30\0\1\257\30\0\1\257\27\0\1\62\24\0\1\257"+
    "\25\0\3\62\1\260\24\62\31\0\1\253\30\0\1\253"+
    "\60\0\1\261\30\0\1\261\62\0\1\262\30\0\1\262"+
    "\43\0\1\263\30\0\1\263\25\0\1\62\25\0\1\253"+
    "\24\0\4\62\1\254\23\62\3\0\1\62\31\0\1\261"+
    "\20\0\10\62\1\264\17\62\3\0\1\62\37\0\1\262"+
    "\12\0\16\62\1\265\11\62\3\0\1\62\26\0\1\263"+
    "\23\0\5\62\1\266\22\62\35\0\1\267\30\0\1\267"+
    "\73\0\1\270\30\0\1\270\3\0\1\62\31\0\1\267"+
    "\20\0\10\62\1\271\17\62\3\0\1\62\50\0\1\270"+
    "\1\0\27\62\1\272\42\0\1\273\30\0\1\273\15\0"+
    "\1\62\36\0\1\273\13\0\15\62\1\274\12\62\26\0"+
    "\1\275\30\0\1\275\31\0\1\62\22\0\1\275\27\0"+
    "\1\62\1\276\26\62\26\0\1\277\30\0\1\277\31\0"+
    "\1\62\22\0\1\277\27\0\1\62\1\300\26\62\2\0"+
    "\1\146\1\301\22\0\27\146\1\0\30\301\2\0\1\146"+
    "\1\147\22\0\27\146\1\0\30\301\2\0\1\146\1\301"+
    "\22\0\2\146\1\302\24\146\1\0\3\301\1\303\24\301"+
    "\2\0\1\146\1\301\22\0\20\146\1\304\6\146\1\0"+
    "\21\301\1\305\6\301\2\0\1\146\1\147\22\0\2\146"+
    "\1\302\24\146\1\0\3\44\1\306\24\44\2\0\1\146"+
    "\1\147\22\0\20\146\1\304\6\146\1\0\21\44\1\307"+
    "\6\44\2\0\1\146\1\301\22\0\11\146\1\310\15\146"+
    "\1\0\12\301\1\311\15\301\2\0\1\146\1\301\22\0"+
    "\15\146\1\312\11\146\1\0\16\301\1\313\11\301\2\0"+
    "\1\146\1\147\22\0\11\146\1\310\15\146\1\0\12\44"+
    "\1\314\15\44\2\0\1\146\1\147\22\0\15\146\1\312"+
    "\11\146\1\0\16\44\1\315\11\44\2\0\1\146\1\301"+
    "\22\0\4\146\1\316\22\146\1\0\5\301\1\317\22\301"+
    "\2\0\1\146\1\301\22\0\4\146\1\320\22\146\1\0"+
    "\5\301\1\321\22\301\2\0\1\146\1\147\22\0\4\146"+
    "\1\316\22\146\1\0\5\44\1\322\22\44\2\0\1\146"+
    "\1\147\22\0\4\146\1\320\22\146\1\0\5\44\1\323"+
    "\22\44\2\0\1\146\1\301\22\0\6\146\1\324\16\146"+
    "\1\325\1\146\1\0\7\301\1\326\16\301\1\327\1\301"+
    "\2\0\1\146\1\147\22\0\6\146\1\324\16\146\1\325"+
    "\1\146\1\0\7\44\1\330\16\44\1\331\1\44\2\0"+
    "\1\146\1\301\22\0\5\146\1\332\21\146\1\0\6\301"+
    "\1\333\21\301\2\0\1\146\1\301\22\0\7\146\1\334"+
    "\17\146\1\0\10\301\1\335\17\301\2\0\1\146\1\301"+
    "\22\0\7\146\1\336\17\146\1\0\10\301\1\337\17\301"+
    "\2\0\1\146\1\147\22\0\5\146\1\332\21\146\1\0"+
    "\6\44\1\340\21\44\2\0\1\146\1\147\22\0\7\146"+
    "\1\334\17\146\1\0\10\44\1\341\17\44\2\0\1\146"+
    "\1\147\22\0\7\146\1\336\17\146\1\0\10\44\1\342"+
    "\17\44\2\0\1\146\1\301\22\0\14\146\1\343\12\146"+
    "\1\0\15\301\1\344\12\301\2\0\1\146\1\147\22\0"+
    "\14\146\1\343\12\146\1\0\15\44\1\345\12\44\2\0"+
    "\1\146\1\301\22\0\13\146\1\346\13\146\1\0\14\301"+
    "\1\347\13\301\2\0\1\146\1\147\22\0\13\146\1\346"+
    "\13\146\1\0\14\44\1\350\13\44\2\0\1\146\1\301"+
    "\22\0\2\146\1\351\24\146\1\0\3\301\1\352\24\301"+
    "\2\0\1\146\1\147\22\0\2\146\1\351\24\146\1\0"+
    "\3\44\1\353\24\44\2\0\1\146\1\301\22\0\3\146"+
    "\1\343\23\146\1\0\4\301\1\344\23\301\2\0\1\146"+
    "\1\301\22\0\7\146\1\354\17\146\1\0\10\301\1\355"+
    "\17\301\2\0\1\146\1\301\22\0\15\146\1\356\11\146"+
    "\1\0\16\301\1\357\11\301\2\0\1\146\1\301\22\0"+
    "\4\146\1\360\22\146\1\0\5\301\1\361\22\301\2\0"+
    "\1\146\1\147\22\0\3\146\1\343\23\146\1\0\4\44"+
    "\1\345\23\44\2\0\1\146\1\147\22\0\7\146\1\354"+
    "\17\146\1\0\10\44\1\362\17\44\2\0\1\146\1\147"+
    "\22\0\15\146\1\356\11\146\1\0\16\44\1\363\11\44"+
    "\2\0\1\146\1\147\22\0\4\146\1\360\22\146\1\0"+
    "\5\44\1\364\22\44\2\0\1\146\1\301\22\0\7\146"+
    "\1\365\17\146\1\0\10\301\1\366\17\301\2\0\1\146"+
    "\1\301\22\0\26\146\1\367\1\0\27\301\1\370\2\0"+
    "\1\146\1\147\22\0\7\146\1\365\17\146\1\0\10\44"+
    "\1\371\17\44\2\0\1\146\1\147\22\0\26\146\1\367"+
    "\1\0\27\44\1\372\2\0\1\146\1\301\22\0\14\146"+
    "\1\373\12\146\1\0\15\301\1\374\12\301\2\0\1\146"+
    "\1\147\22\0\14\146\1\373\12\146\1\0\15\44\1\375"+
    "\12\44\2\0\1\146\1\301\22\0\1\376\26\146\1\0"+
    "\1\301\1\377\26\301\2\0\1\146\1\147\22\0\1\376"+
    "\26\146\1\0\1\44\1\u0100\26\44\2\0\1\146\1\301"+
    "\22\0\1\u0101\26\146\1\0\1\301\1\u0102\26\301\2\0"+
    "\1\146\1\147\22\0\1\u0101\26\146\1\0\1\44\1\u0103"+
    "\26\44\6\0\1\224\130\0\1\u0104\30\0\1\u0104\53\0"+
    "\1\u0105\30\0\1\u0105\27\0\1\62\25\0\1\u0104\24\0"+
    "\4\62\1\u0106\23\62\3\0\1\62\24\0\1\u0105\25\0"+
    "\3\62\1\u0107\24\62\30\0\1\u0108\30\0\1\u0108\54\0"+
    "\1\u0109\30\0\1\u0109\27\0\1\62\24\0\1\u0108\25\0"+
    "\3\62\1\u010a\24\62\3\0\1\62\24\0\1\u0109\25\0"+
    "\3\62\1\u010b\24\62\50\0\1\u010c\30\0\1\u010c\41\0"+
    "\1\u010d\30\0\1\u010d\22\0\1\62\44\0\1\u010c\5\0"+
    "\23\62\1\u010e\4\62\3\0\1\62\31\0\1\u010d\20\0"+
    "\10\62\1\u010f\17\62\30\0\1\u0110\30\0\1\u0110\56\0"+
    "\1\u0111\30\0\1\u0111\25\0\1\62\24\0\1\u0110\25\0"+
    "\3\62\1\u0112\24\62\3\0\1\62\26\0\1\u0111\23\0"+
    "\5\62\1\u0113\22\62\41\0\1\u0114\30\0\1\u0114\47\0"+
    "\1\u0115\30\0\1\u0115\56\0\1\u0116\30\0\1\u0116\21\0"+
    "\1\62\35\0\1\u0114\14\0\14\62\1\u0117\13\62\3\0"+
    "\1\62\30\0\1\u0115\21\0\7\62\1\u0118\20\62\3\0"+
    "\1\62\32\0\1\u0116\17\0\11\62\1\u0119\16\62\43\0"+
    "\1\u011a\30\0\1\u011a\14\0\1\62\37\0\1\u011a\12\0"+
    "\16\62\1\u011b\11\62\35\0\1\u011c\30\0\1\u011c\22\0"+
    "\1\62\31\0\1\u011c\20\0\10\62\1\u011d\17\62\31\0"+
    "\1\u011e\30\0\1\u011e\77\0\1\u011f\30\0\1\u011f\34\0"+
    "\1\u0120\30\0\1\u0120\23\0\1\62\25\0\1\u011e\24\0"+
    "\4\62\1\u0121\23\62\3\0\1\62\50\0\1\u011f\1\0"+
    "\27\62\1\u0122\3\0\1\62\30\0\1\u0120\21\0\7\62"+
    "\1\u0123\20\62\43\0\1\u0124\30\0\1\u0124\45\0\1\u011f"+
    "\30\0\1\u011f\23\0\1\62\37\0\1\u0124\12\0\16\62"+
    "\1\u0125\11\62\3\0\1\62\30\0\1\u011f\21\0\7\62"+
    "\1\u0122\20\62\37\0\1\u011f\30\0\1\u011f\20\0\1\62"+
    "\33\0\1\u011f\16\0\12\62\1\u0122\15\62\31\0\1\u0126"+
    "\30\0\1\u0126\26\0\1\62\25\0\1\u0126\24\0\4\62"+
    "\1\u0127\23\62\32\0\1\u0128\30\0\1\u0128\25\0\1\62"+
    "\26\0\1\u0128\23\0\5\62\1\u0129\22\62\3\0\1\301"+
    "\52\0\30\301\2\0\1\146\1\301\22\0\3\146\1\u012a"+
    "\23\146\1\0\4\301\1\u012b\23\301\3\0\1\301\25\0"+
    "\1\u0104\24\0\4\301\1\u012b\23\301\2\0\1\146\1\301"+
    "\22\0\2\146\1\u012c\24\146\1\0\3\301\1\u012d\24\301"+
    "\3\0\1\301\24\0\1\u0105\25\0\3\301\1\u012d\24\301"+
    "\2\0\1\146\1\147\22\0\3\146\1\u012a\23\146\1\0"+
    "\4\44\1\u012e\23\44\2\0\1\146\1\147\22\0\2\146"+
    "\1\u012c\24\146\1\0\3\44\1\u012f\24\44\2\0\1\146"+
    "\1\301\22\0\2\146\1\u0130\24\146\1\0\3\301\1\u0131"+
    "\24\301\3\0\1\301\24\0\1\u0108\25\0\3\301\1\u0131"+
    "\24\301\2\0\1\146\1\301\22\0\2\146\1\u0132\24\146"+
    "\1\0\3\301\1\u0133\24\301\3\0\1\301\24\0\1\u0109"+
    "\25\0\3\301\1\u0133\24\301\2\0\1\146\1\147\22\0"+
    "\2\146\1\u0130\24\146\1\0\3\44\1\u0134\24\44\2\0"+
    "\1\146\1\147\22\0\2\146\1\u0132\24\146\1\0\3\44"+
    "\1\u0135\24\44\2\0\1\146\1\301\22\0\22\146\1\u0136"+
    "\4\146\1\0\23\301\1\u0137\4\301\3\0\1\301\44\0"+
    "\1\u010c\5\0\23\301\1\u0137\4\301\2\0\1\146\1\301"+
    "\22\0\7\146\1\u0138\17\146\1\0\10\301\1\u0139\17\301"+
    "\3\0\1\301\31\0\1\u010d\20\0\10\301\1\u0139\17\301"+
    "\2\0\1\146\1\147\22\0\22\146\1\u0136\4\146\1\0"+
    "\23\44\1\u013a\4\44\2\0\1\146\1\147\22\0\7\146"+
    "\1\u0138\17\146\1\0\10\44\1\u013b\17\44\2\0\1\146"+
    "\1\301\22\0\2\146\1\u013c\24\146\1\0\3\301\1\u013d"+
    "\24\301\2\0\1\146\1\301\22\0\4\146\1\u013e\22\146"+
    "\1\0\5\301\1\u013f\22\301\3\0\1\301\24\0\1\u0110"+
    "\25\0\3\301\1\u013d\24\301\3\0\1\301\26\0\1\u0111"+
    "\23\0\5\301\1\u013f\22\301\2\0\1\146\1\147\22\0"+
    "\2\146\1\u013c\24\146\1\0\3\44\1\u0140\24\44\2\0"+
    "\1\146\1\147\22\0\4\146\1\u013e\22\146\1\0\5\44"+
    "\1\u0141\22\44\2\0\1\146\1\301\22\0\13\146\1\u0142"+
    "\13\146\1\0\14\301\1\u0143\13\301\3\0\1\301\35\0"+
    "\1\u0114\14\0\14\301\1\u0143\13\301\2\0\1\146\1\301"+
    "\22\0\6\146\1\u0144\20\146\1\0\7\301\1\u0145\20\301"+
    "\3\0\1\301\30\0\1\u0115\21\0\7\301\1\u0145\20\301"+
    "\2\0\1\146\1\301\22\0\10\146\1\u0146\16\146\1\0"+
    "\11\301\1\u0147\16\301\3\0\1\301\32\0\1\u0116\17\0"+
    "\11\301\1\u0147\16\301\2\0\1\146\1\147\22\0\13\146"+
    "\1\u0142\13\146\1\0\14\44\1\u0148\13\44\2\0\1\146"+
    "\1\147\22\0\6\146\1\u0144\20\146\1\0\7\44\1\u0149"+
    "\20\44\2\0\1\146\1\147\22\0\10\146\1\u0146\16\146"+
    "\1\0\11\44\1\u014a\16\44\2\0\1\146\1\301\22\0"+
    "\15\146\1\u014b\11\146\1\0\16\301\1\u014c\11\301\3\0"+
    "\1\301\37\0\1\u011a\12\0\16\301\1\u014c\11\301\2\0"+
    "\1\146\1\147\22\0\15\146\1\u014b\11\146\1\0\16\44"+
    "\1\u014d\11\44\2\0\1\146\1\301\22\0\7\146\1\u014e"+
    "\17\146\1\0\10\301\1\u014f\17\301\3\0\1\301\31\0"+
    "\1\u011c\20\0\10\301\1\u014f\17\301\2\0\1\146\1\147"+
    "\22\0\7\146\1\u014e\17\146\1\0\10\44\1\u0150\17\44"+
    "\2\0\1\146\1\301\22\0\3\146\1\u0151\23\146\1\0"+
    "\4\301\1\u0152\23\301\3\0\1\301\25\0\1\u011e\24\0"+
    "\4\301\1\u0152\23\301\2\0\1\146\1\301\22\0\26\146"+
    "\1\u0153\1\0\27\301\1\u0154\3\0\1\301\50\0\1\u011f"+
    "\1\0\27\301\1\u0154\2\0\1\146\1\301\22\0\6\146"+
    "\1\u0155\20\146\1\0\7\301\1\u0156\20\301\3\0\1\301"+
    "\30\0\1\u0120\21\0\7\301\1\u0156\20\301\2\0\1\146"+
    "\1\147\22\0\3\146\1\u0151\23\146\1\0\4\44\1\u0157"+
    "\23\44\2\0\1\146\1\147\22\0\26\146\1\u0153\1\0"+
    "\27\44\1\u0158\2\0\1\146\1\147\22\0\6\146\1\u0155"+
    "\20\146\1\0\7\44\1\u0159\20\44\2\0\1\146\1\301"+
    "\22\0\15\146\1\u015a\11\146\1\0\16\301\1\u015b\11\301"+
    "\3\0\1\301\37\0\1\u0124\12\0\16\301\1\u015b\11\301"+
    "\2\0\1\146\1\301\22\0\6\146\1\u0153\20\146\1\0"+
    "\7\301\1\u0154\20\301\3\0\1\301\30\0\1\u011f\21\0"+
    "\7\301\1\u0154\20\301\2\0\1\146\1\147\22\0\15\146"+
    "\1\u015a\11\146\1\0\16\44\1\u015c\11\44\2\0\1\146"+
    "\1\147\22\0\6\146\1\u0153\20\146\1\0\7\44\1\u0158"+
    "\20\44\2\0\1\146\1\301\22\0\11\146\1\u0153\15\146"+
    "\1\0\12\301\1\u0154\15\301\3\0\1\301\33\0\1\u011f"+
    "\16\0\12\301\1\u0154\15\301\2\0\1\146\1\147\22\0"+
    "\11\146\1\u0153\15\146\1\0\12\44\1\u0158\15\44\2\0"+
    "\1\146\1\301\22\0\3\146\1\u015d\23\146\1\0\4\301"+
    "\1\u015e\23\301\3\0\1\301\25\0\1\u0126\24\0\4\301"+
    "\1\u015e\23\301\2\0\1\146\1\147\22\0\3\146\1\u015d"+
    "\23\146\1\0\4\44\1\u015f\23\44\2\0\1\146\1\301"+
    "\22\0\4\146\1\u0160\22\146\1\0\5\301\1\u0161\22\301"+
    "\3\0\1\301\26\0\1\u0128\23\0\5\301\1\u0161\22\301"+
    "\2\0\1\146\1\147\22\0\4\146\1\u0160\22\146\1\0"+
    "\5\44\1\u0162\22\44\32\0\1\u0163\30\0\1\u0163\50\0"+
    "\1\u0164\30\0\1\u0164\31\0\1\62\26\0\1\u0163\23\0"+
    "\5\62\1\u0165\22\62\3\0\1\62\22\0\1\u0164\27\0"+
    "\1\62\1\u0166\26\62\26\0\1\u0167\30\0\1\u0167\63\0"+
    "\1\u0168\30\0\1\u0168\22\0\1\62\22\0\1\u0167\27\0"+
    "\1\62\1\u0169\26\62\3\0\1\62\31\0\1\u0168\20\0"+
    "\10\62\1\u016a\17\62\32\0\1\u016b\30\0\1\u016b\71\0"+
    "\1\u016c\30\0\1\u016c\10\0\1\62\26\0\1\u016b\23\0"+
    "\5\62\1\u016d\22\62\3\0\1\62\43\0\1\u016c\6\0"+
    "\22\62\1\u016e\5\62\26\0\1\u016f\30\0\1\u016f\31\0"+
    "\1\62\22\0\1\u016f\27\0\1\62\1\u0170\26\62\26\0"+
    "\1\u0171\30\0\1\u0171\64\0\1\u0172\30\0\1\u0172\21\0"+
    "\1\62\22\0\1\u0171\27\0\1\62\1\u0173\26\62\3\0"+
    "\1\62\32\0\1\u0172\17\0\11\62\1\u0174\16\62\41\0"+
    "\1\u0175\30\0\1\u0175\16\0\1\62\35\0\1\u0175\14\0"+
    "\14\62\1\u0176\13\62\45\0\1\u0177\30\0\1\u0177\12\0"+
    "\1\62\41\0\1\u0177\10\0\20\62\1\u0178\7\62\41\0"+
    "\1\u0179\30\0\1\u0179\51\0\1\253\30\0\1\253\46\0"+
    "\1\253\30\0\1\253\27\0\1\62\35\0\1\u0179\14\0"+
    "\14\62\1\u017a\13\62\3\0\1\62\32\0\1\253\17\0"+
    "\11\62\1\254\16\62\3\0\1\62\24\0\1\253\25\0"+
    "\3\62\1\254\24\62\41\0\1\u017b\30\0\1\u017b\16\0"+
    "\1\62\35\0\1\u017b\14\0\14\62\1\u017c\13\62\32\0"+
    "\1\u017d\30\0\1\u017d\25\0\1\62\26\0\1\u017d\23\0"+
    "\5\62\1\u017e\22\62\26\0\1\u017f\30\0\1\u017f\31\0"+
    "\1\62\22\0\1\u017f\27\0\1\62\1\u0180\26\62\2\0"+
    "\1\146\1\301\22\0\4\146\1\u0181\22\146\1\0\5\301"+
    "\1\u0182\22\301\3\0\1\301\26\0\1\u0163\23\0\5\301"+
    "\1\u0182\22\301\2\0\1\146\1\301\22\0\1\u0183\26\146"+
    "\1\0\1\301\1\u0184\26\301\3\0\1\301\22\0\1\u0164"+
    "\27\0\1\301\1\u0184\26\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u0181\22\146\1\0\5\44\1\u0185\22\44\2\0"+
    "\1\146\1\147\22\0\1\u0183\26\146\1\0\1\44\1\u0186"+
    "\26\44\2\0\1\146\1\301\22\0\1\u0187\26\146\1\0"+
    "\1\301\1\u0188\26\301\3\0\1\301\22\0\1\u0167\27\0"+
    "\1\301\1\u0188\26\301\2\0\1\146\1\301\22\0\7\146"+
    "\1\u0189\17\146\1\0\10\301\1\u018a\17\301\3\0\1\301"+
    "\31\0\1\u0168\20\0\10\301\1\u018a\17\301\2\0\1\146"+
    "\1\147\22\0\1\u0187\26\146\1\0\1\44\1\u018b\26\44"+
    "\2\0\1\146\1\147\22\0\7\146\1\u0189\17\146\1\0"+
    "\10\44\1\u018c\17\44\2\0\1\146\1\301\22\0\4\146"+
    "\1\u018d\22\146\1\0\5\301\1\u018e\22\301\3\0\1\301"+
    "\26\0\1\u016b\23\0\5\301\1\u018e\22\301\2\0\1\146"+
    "\1\301\22\0\21\146\1\u018f\5\146\1\0\22\301\1\u0190"+
    "\5\301\3\0\1\301\43\0\1\u016c\6\0\22\301\1\u0190"+
    "\5\301\2\0\1\146\1\147\22\0\4\146\1\u018d\22\146"+
    "\1\0\5\44\1\u0191\22\44\2\0\1\146\1\147\22\0"+
    "\21\146\1\u018f\5\146\1\0\22\44\1\u0192\5\44\2\0"+
    "\1\146\1\301\22\0\1\u0193\26\146\1\0\1\301\1\u0194"+
    "\26\301\3\0\1\301\22\0\1\u016f\27\0\1\301\1\u0194"+
    "\26\301\2\0\1\146\1\147\22\0\1\u0193\26\146\1\0"+
    "\1\44\1\u0195\26\44\2\0\1\146\1\301\22\0\1\u0196"+
    "\26\146\1\0\1\301\1\u0197\26\301\3\0\1\301\22\0"+
    "\1\u0171\27\0\1\301\1\u0197\26\301\2\0\1\146\1\301"+
    "\22\0\10\146\1\u0198\16\146\1\0\11\301\1\u0199\16\301"+
    "\3\0\1\301\32\0\1\u0172\17\0\11\301\1\u0199\16\301"+
    "\2\0\1\146\1\147\22\0\1\u0196\26\146\1\0\1\44"+
    "\1\u019a\26\44\2\0\1\146\1\147\22\0\10\146\1\u0198"+
    "\16\146\1\0\11\44\1\u019b\16\44\2\0\1\146\1\301"+
    "\22\0\13\146\1\u019c\13\146\1\0\14\301\1\u019d\13\301"+
    "\3\0\1\301\35\0\1\u0175\14\0\14\301\1\u019d\13\301"+
    "\2\0\1\146\1\147\22\0\13\146\1\u019c\13\146\1\0"+
    "\14\44\1\u019e\13\44\2\0\1\146\1\301\22\0\17\146"+
    "\1\u019f\7\146\1\0\20\301\1\u01a0\7\301\3\0\1\301"+
    "\41\0\1\u0177\10\0\20\301\1\u01a0\7\301\2\0\1\146"+
    "\1\147\22\0\17\146\1\u019f\7\146\1\0\20\44\1\u01a1"+
    "\7\44\2\0\1\146\1\301\22\0\13\146\1\u01a2\13\146"+
    "\1\0\14\301\1\u01a3\13\301\3\0\1\301\35\0\1\u0179"+
    "\14\0\14\301\1\u01a3\13\301\2\0\1\146\1\301\22\0"+
    "\10\146\1\343\16\146\1\0\11\301\1\344\16\301\3\0"+
    "\1\301\32\0\1\253\17\0\11\301\1\344\16\301\2\0"+
    "\1\146\1\301\22\0\2\146\1\343\24\146\1\0\3\301"+
    "\1\344\24\301\3\0\1\301\24\0\1\253\25\0\3\301"+
    "\1\344\24\301\2\0\1\146\1\147\22\0\13\146\1\u01a2"+
    "\13\146\1\0\14\44\1\u01a4\13\44\2\0\1\146\1\147"+
    "\22\0\10\146\1\343\16\146\1\0\11\44\1\345\16\44"+
    "\2\0\1\146\1\147\22\0\2\146\1\343\24\146\1\0"+
    "\3\44\1\345\24\44\2\0\1\146\1\301\22\0\13\146"+
    "\1\u01a5\13\146\1\0\14\301\1\u01a6\13\301\3\0\1\301"+
    "\35\0\1\u017b\14\0\14\301\1\u01a6\13\301\2\0\1\146"+
    "\1\147\22\0\13\146\1\u01a5\13\146\1\0\14\44\1\u01a7"+
    "\13\44\2\0\1\146\1\301\22\0\4\146\1\u01a8\22\146"+
    "\1\0\5\301\1\u01a9\22\301\3\0\1\301\26\0\1\u017d"+
    "\23\0\5\301\1\u01a9\22\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u01a8\22\146\1\0\5\44\1\u01aa\22\44\2\0"+
    "\1\146\1\301\22\0\1\u01ab\26\146\1\0\1\301\1\u01ac"+
    "\26\301\3\0\1\301\22\0\1\u017f\27\0\1\301\1\u01ac"+
    "\26\301\2\0\1\146\1\147\22\0\1\u01ab\26\146\1\0"+
    "\1\44\1\u01ad\26\44\34\0\1\u01ae\30\0\1\u01ae\23\0"+
    "\1\62\30\0\1\u01ae\21\0\7\62\1\u01af\20\62\32\0"+
    "\1\u01b0\30\0\1\u01b0\53\0\1\u01b1\30\0\1\u01b1\26\0"+
    "\1\62\26\0\1\u01b0\23\0\5\62\1\u01b2\22\62\3\0"+
    "\1\62\25\0\1\u01b1\24\0\4\62\1\u01b3\23\62\26\0"+
    "\1\u01b4\30\0\1\u01b4\60\0\1\u01b5\30\0\1\u01b5\25\0"+
    "\1\62\22\0\1\u01b4\27\0\1\62\1\u01b6\26\62\3\0"+
    "\1\62\26\0\1\u01b5\23\0\5\62\1\u01b7\22\62\33\0"+
    "\1\u01b8\30\0\1\u01b8\24\0\1\62\27\0\1\u01b8\22\0"+
    "\6\62\1\u01b9\21\62\33\0\1\u01ba\30\0\1\u01ba\47\0"+
    "\1\u01bb\30\0\1\u01bb\31\0\1\62\27\0\1\u01ba\22\0"+
    "\6\62\1\u01bc\21\62\3\0\1\62\22\0\1\u01bb\27\0"+
    "\1\62\1\u01bd\26\62\36\0\1\u01be\30\0\1\u01be\21\0"+
    "\1\62\32\0\1\u01be\17\0\11\62\1\u01bf\16\62\26\0"+
    "\1\u01c0\30\0\1\u01c0\31\0\1\62\22\0\1\u01c0\27\0"+
    "\1\62\1\u01c1\26\62\43\0\1\u01c2\30\0\1\u01c2\14\0"+
    "\1\62\37\0\1\u01c2\12\0\16\62\1\u01c3\11\62\36\0"+
    "\1\u01c4\30\0\1\u01c4\21\0\1\62\32\0\1\u01c4\17\0"+
    "\11\62\1\u01c5\16\62\31\0\1\u01c6\30\0\1\u01c6\26\0"+
    "\1\62\25\0\1\u01c6\24\0\4\62\1\u01c7\23\62\31\0"+
    "\1\u01c8\7\0\1\u01c9\20\0\1\u01c8\7\0\1\u01c9\16\0"+
    "\1\62\25\0\1\u01c8\7\0\1\u01c9\14\0\4\62\1\u01ca"+
    "\7\62\1\u01cb\13\62\2\0\1\146\1\301\22\0\6\146"+
    "\1\u01cc\20\146\1\0\7\301\1\u01cd\20\301\3\0\1\301"+
    "\30\0\1\u01ae\21\0\7\301\1\u01cd\20\301\2\0\1\146"+
    "\1\147\22\0\6\146\1\u01cc\20\146\1\0\7\44\1\u01ce"+
    "\20\44\2\0\1\146\1\301\22\0\4\146\1\u01cf\22\146"+
    "\1\0\5\301\1\u01d0\22\301\3\0\1\301\26\0\1\u01b0"+
    "\23\0\5\301\1\u01d0\22\301\2\0\1\146\1\301\22\0"+
    "\3\146\1\u01d1\23\146\1\0\4\301\1\u01d2\23\301\3\0"+
    "\1\301\25\0\1\u01b1\24\0\4\301\1\u01d2\23\301\2\0"+
    "\1\146\1\147\22\0\4\146\1\u01cf\22\146\1\0\5\44"+
    "\1\u01d3\22\44\2\0\1\146\1\147\22\0\3\146\1\u01d1"+
    "\23\146\1\0\4\44\1\u01d4\23\44\2\0\1\146\1\301"+
    "\22\0\1\u01d5\26\146\1\0\1\301\1\u01d6\26\301\3\0"+
    "\1\301\22\0\1\u01b4\27\0\1\301\1\u01d6\26\301\2\0"+
    "\1\146\1\301\22\0\4\146\1\u01d7\22\146\1\0\5\301"+
    "\1\u01d8\22\301\3\0\1\301\26\0\1\u01b5\23\0\5\301"+
    "\1\u01d8\22\301\2\0\1\146\1\147\22\0\1\u01d5\26\146"+
    "\1\0\1\44\1\u01d9\26\44\2\0\1\146\1\147\22\0"+
    "\4\146\1\u01d7\22\146\1\0\5\44\1\u01da\22\44\2\0"+
    "\1\146\1\301\22\0\5\146\1\u01db\21\146\1\0\6\301"+
    "\1\u01dc\21\301\3\0\1\301\27\0\1\u01b8\22\0\6\301"+
    "\1\u01dc\21\301\2\0\1\146\1\147\22\0\5\146\1\u01db"+
    "\21\146\1\0\6\44\1\u01dd\21\44\2\0\1\146\1\301"+
    "\22\0\5\146\1\u01de\21\146\1\0\6\301\1\u01df\21\301"+
    "\3\0\1\301\27\0\1\u01ba\22\0\6\301\1\u01df\21\301"+
    "\2\0\1\146\1\301\22\0\1\u01e0\26\146\1\0\1\301"+
    "\1\u01e1\26\301\3\0\1\301\22\0\1\u01bb\27\0\1\301"+
    "\1\u01e1\26\301\2\0\1\146\1\147\22\0\5\146\1\u01de"+
    "\21\146\1\0\6\44\1\u01e2\21\44\2\0\1\146\1\147"+
    "\22\0\1\u01e0\26\146\1\0\1\44\1\u01e3\26\44\2\0"+
    "\1\146\1\301\22\0\10\146\1\u01e4\16\146\1\0\11\301"+
    "\1\u01e5\16\301\3\0\1\301\32\0\1\u01be\17\0\11\301"+
    "\1\u01e5\16\301\2\0\1\146\1\147\22\0\10\146\1\u01e4"+
    "\16\146\1\0\11\44\1\u01e6\16\44\2\0\1\146\1\301"+
    "\22\0\1\u01e7\26\146\1\0\1\301\1\u01e8\26\301\3\0"+
    "\1\301\22\0\1\u01c0\27\0\1\301\1\u01e8\26\301\2\0"+
    "\1\146\1\147\22\0\1\u01e7\26\146\1\0\1\44\1\u01e9"+
    "\26\44\2\0\1\146\1\301\22\0\15\146\1\u01ea\11\146"+
    "\1\0\16\301\1\u01eb\11\301\3\0\1\301\37\0\1\u01c2"+
    "\12\0\16\301\1\u01eb\11\301\2\0\1\146\1\147\22\0"+
    "\15\146\1\u01ea\11\146\1\0\16\44\1\u01ec\11\44\2\0"+
    "\1\146\1\301\22\0\10\146\1\u01ed\16\146\1\0\11\301"+
    "\1\u01ee\16\301\3\0\1\301\32\0\1\u01c4\17\0\11\301"+
    "\1\u01ee\16\301\2\0\1\146\1\147\22\0\10\146\1\u01ed"+
    "\16\146\1\0\11\44\1\u01ef\16\44\2\0\1\146\1\301"+
    "\22\0\3\146\1\u01f0\23\146\1\0\4\301\1\u01f1\23\301"+
    "\3\0\1\301\25\0\1\u01c6\24\0\4\301\1\u01f1\23\301"+
    "\2\0\1\146\1\147\22\0\3\146\1\u01f0\23\146\1\0"+
    "\4\44\1\u01f2\23\44\2\0\1\146\1\301\22\0\3\146"+
    "\1\u01f3\7\146\1\u01f4\13\146\1\0\4\301\1\u01f5\7\301"+
    "\1\u01f6\13\301\3\0\1\301\25\0\1\u01c8\7\0\1\u01c9"+
    "\14\0\4\301\1\u01f5\7\301\1\u01f6\13\301\2\0\1\146"+
    "\1\147\22\0\3\146\1\u01f3\7\146\1\u01f4\13\146\1\0"+
    "\4\44\1\u01f7\7\44\1\u01f8\13\44\32\0\1\u01f9\30\0"+
    "\1\u01f9\25\0\1\62\26\0\1\u01f9\23\0\5\62\1\u01fa"+
    "\22\62\30\0\1\u01fb\30\0\1\u01fb\27\0\1\62\24\0"+
    "\1\u01fb\25\0\3\62\1\u01fc\24\62\46\0\1\u01fd\30\0"+
    "\1\u01fd\34\0\1\u01fe\30\0\1\u01fe\31\0\1\62\42\0"+
    "\1\u01fd\7\0\21\62\1\u01ff\6\62\3\0\1\62\22\0"+
    "\1\u01fe\27\0\1\62\1\u0200\26\62\32\0\1\u0201\30\0"+
    "\1\u0201\25\0\1\62\26\0\1\u0201\23\0\5\62\1\u0202"+
    "\22\62\32\0\1\u0203\30\0\1\u0203\61\0\1\u0204\30\0"+
    "\1\u0204\20\0\1\62\26\0\1\u0203\23\0\5\62\1\u0205"+
    "\22\62\3\0\1\62\33\0\1\u0204\16\0\12\62\1\u0206"+
    "\15\62\32\0\1\u0207\30\0\1\u0207\25\0\1\62\26\0"+
    "\1\u0207\23\0\5\62\1\u0208\22\62\41\0\1\u0209\30\0"+
    "\1\u0209\16\0\1\62\35\0\1\u0209\14\0\14\62\1\u020a"+
    "\13\62\35\0\1\u020b\30\0\1\u020b\22\0\1\62\31\0"+
    "\1\u020b\20\0\10\62\1\u020c\17\62\30\0\1\u020d\30\0"+
    "\1\u020d\27\0\1\62\24\0\1\u020d\25\0\3\62\1\u020e"+
    "\24\62\30\0\1\u020f\30\0\1\u020f\73\0\1\u0210\30\0"+
    "\1\u0210\10\0\1\62\24\0\1\u020f\25\0\3\62\1\u0211"+
    "\24\62\3\0\1\62\43\0\1\u0210\6\0\22\62\1\u0212"+
    "\5\62\2\0\1\146\1\301\22\0\4\146\1\u0213\22\146"+
    "\1\0\5\301\1\u0214\22\301\3\0\1\301\26\0\1\u01f9"+
    "\23\0\5\301\1\u0214\22\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u0213\22\146\1\0\5\44\1\u0215\22\44\2\0"+
    "\1\146\1\301\22\0\2\146\1\u0216\24\146\1\0\3\301"+
    "\1\u0217\24\301\3\0\1\301\24\0\1\u01fb\25\0\3\301"+
    "\1\u0217\24\301\2\0\1\146\1\147\22\0\2\146\1\u0216"+
    "\24\146\1\0\3\44\1\u0218\24\44\2\0\1\146\1\301"+
    "\22\0\20\146\1\u0219\6\146\1\0\21\301\1\u021a\6\301"+
    "\3\0\1\301\42\0\1\u01fd\7\0\21\301\1\u021a\6\301"+
    "\2\0\1\146\1\301\22\0\1\u021b\26\146\1\0\1\301"+
    "\1\u021c\26\301\3\0\1\301\22\0\1\u01fe\27\0\1\301"+
    "\1\u021c\26\301\2\0\1\146\1\147\22\0\20\146\1\u0219"+
    "\6\146\1\0\21\44\1\u021d\6\44\2\0\1\146\1\147"+
    "\22\0\1\u021b\26\146\1\0\1\44\1\u021e\26\44\2\0"+
    "\1\146\1\301\22\0\4\146\1\u021f\22\146\1\0\5\301"+
    "\1\u0220\22\301\3\0\1\301\26\0\1\u0201\23\0\5\301"+
    "\1\u0220\22\301\2\0\1\146\1\147\22\0\4\146\1\u021f"+
    "\22\146\1\0\5\44\1\u0221\22\44\2\0\1\146\1\301"+
    "\22\0\4\146\1\u0222\22\146\1\0\5\301\1\u0223\22\301"+
    "\3\0\1\301\26\0\1\u0203\23\0\5\301\1\u0223\22\301"+
    "\2\0\1\146\1\301\22\0\11\146\1\u0224\15\146\1\0"+
    "\12\301\1\u0225\15\301\3\0\1\301\33\0\1\u0204\16\0"+
    "\12\301\1\u0225\15\301\2\0\1\146\1\147\22\0\4\146"+
    "\1\u0222\22\146\1\0\5\44\1\u0226\22\44\2\0\1\146"+
    "\1\147\22\0\11\146\1\u0224\15\146\1\0\12\44\1\u0227"+
    "\15\44\2\0\1\146\1\301\22\0\4\146\1\u0228\22\146"+
    "\1\0\5\301\1\u0229\22\301\3\0\1\301\26\0\1\u0207"+
    "\23\0\5\301\1\u0229\22\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u0228\22\146\1\0\5\44\1\u022a\22\44\2\0"+
    "\1\146\1\301\22\0\13\146\1\u022b\13\146\1\0\14\301"+
    "\1\u022c\13\301\3\0\1\301\35\0\1\u0209\14\0\14\301"+
    "\1\u022c\13\301\2\0\1\146\1\147\22\0\13\146\1\u022b"+
    "\13\146\1\0\14\44\1\u022d\13\44\2\0\1\146\1\301"+
    "\22\0\7\146\1\u022e\17\146\1\0\10\301\1\u022f\17\301"+
    "\3\0\1\301\31\0\1\u020b\20\0\10\301\1\u022f\17\301"+
    "\2\0\1\146\1\147\22\0\7\146\1\u022e\17\146\1\0"+
    "\10\44\1\u0230\17\44\2\0\1\146\1\301\22\0\2\146"+
    "\1\u0231\24\146\1\0\3\301\1\u0232\24\301\3\0\1\301"+
    "\24\0\1\u020d\25\0\3\301\1\u0232\24\301\2\0\1\146"+
    "\1\147\22\0\2\146\1\u0231\24\146\1\0\3\44\1\u0233"+
    "\24\44\2\0\1\146\1\301\22\0\2\146\1\u0234\24\146"+
    "\1\0\3\301\1\u0235\24\301\2\0\1\146\1\301\22\0"+
    "\21\146\1\u0236\5\146\1\0\22\301\1\u0237\5\301\3\0"+
    "\1\301\24\0\1\u020f\25\0\3\301\1\u0235\24\301\3\0"+
    "\1\301\43\0\1\u0210\6\0\22\301\1\u0237\5\301\2\0"+
    "\1\146\1\147\22\0\2\146\1\u0234\24\146\1\0\3\44"+
    "\1\u0238\24\44\2\0\1\146\1\147\22\0\21\146\1\u0236"+
    "\5\146\1\0\22\44\1\u0239\5\44\26\0\1\u023a\30\0"+
    "\1\u023a\31\0\1\62\22\0\1\u023a\27\0\1\62\1\u023b"+
    "\26\62\34\0\1\u023c\30\0\1\u023c\46\0\1\u023d\30\0"+
    "\1\u023d\31\0\1\62\30\0\1\u023c\21\0\7\62\1\u023e"+
    "\20\62\3\0\1\62\22\0\1\u023d\27\0\1\62\1\u023f"+
    "\26\62\34\0\1\u0240\30\0\1\u0240\23\0\1\62\30\0"+
    "\1\u0240\21\0\7\62\1\u0241\20\62\34\0\1\u0242\30\0"+
    "\1\u0242\46\0\1\u0243\30\0\1\u0243\31\0\1\62\30\0"+
    "\1\u0242\21\0\7\62\1\u0244\20\62\3\0\1\62\22\0"+
    "\1\u0243\27\0\1\62\1\u0245\26\62\34\0\1\u0246\30\0"+
    "\1\u0246\23\0\1\62\30\0\1\u0246\21\0\7\62\1\u0247"+
    "\20\62\36\0\1\u0248\30\0\1\u0248\21\0\1\62\32\0"+
    "\1\u0248\17\0\11\62\1\u0249\16\62\26\0\1\u011f\30\0"+
    "\1\u011f\31\0\1\62\22\0\1\u011f\27\0\1\62\1\u0122"+
    "\26\62\26\0\1\u024a\30\0\1\u024a\77\0\1\u024b\30\0"+
    "\1\u024b\6\0\1\62\22\0\1\u024a\27\0\1\62\1\u024c"+
    "\26\62\3\0\1\62\45\0\1\u024b\4\0\24\62\1\u024d"+
    "\3\62\2\0\1\146\1\301\22\0\1\u024e\26\146\1\0"+
    "\1\301\1\u024f\26\301\3\0\1\301\22\0\1\u023a\27\0"+
    "\1\301\1\u024f\26\301\2\0\1\146\1\147\22\0\1\u024e"+
    "\26\146\1\0\1\44\1\u0250\26\44\2\0\1\146\1\301"+
    "\22\0\6\146\1\u0251\20\146\1\0\7\301\1\u0252\20\301"+
    "\3\0\1\301\30\0\1\u023c\21\0\7\301\1\u0252\20\301"+
    "\2\0\1\146\1\301\22\0\1\u0253\26\146\1\0\1\301"+
    "\1\u0254\26\301\3\0\1\301\22\0\1\u023d\27\0\1\301"+
    "\1\u0254\26\301\2\0\1\146\1\147\22\0\6\146\1\u0251"+
    "\20\146\1\0\7\44\1\u0255\20\44\2\0\1\146\1\147"+
    "\22\0\1\u0253\26\146\1\0\1\44\1\u0256\26\44\2\0"+
    "\1\146\1\301\22\0\6\146\1\u0257\20\146\1\0\7\301"+
    "\1\u0258\20\301\3\0\1\301\30\0\1\u0240\21\0\7\301"+
    "\1\u0258\20\301\2\0\1\146\1\147\22\0\6\146\1\u0257"+
    "\20\146\1\0\7\44\1\u0259\20\44\2\0\1\146\1\301"+
    "\22\0\6\146\1\u025a\20\146\1\0\7\301\1\u025b\20\301"+
    "\3\0\1\301\30\0\1\u0242\21\0\7\301\1\u025b\20\301"+
    "\2\0\1\146\1\301\22\0\1\u025c\26\146\1\0\1\301"+
    "\1\u025d\26\301\3\0\1\301\22\0\1\u0243\27\0\1\301"+
    "\1\u025d\26\301\2\0\1\146\1\147\22\0\6\146\1\u025a"+
    "\20\146\1\0\7\44\1\u025e\20\44\2\0\1\146\1\147"+
    "\22\0\1\u025c\26\146\1\0\1\44\1\u025f\26\44\2\0"+
    "\1\146\1\301\22\0\6\146\1\u0260\20\146\1\0\7\301"+
    "\1\u0261\20\301\3\0\1\301\30\0\1\u0246\21\0\7\301"+
    "\1\u0261\20\301\2\0\1\146\1\147\22\0\6\146\1\u0260"+
    "\20\146\1\0\7\44\1\u0262\20\44\2\0\1\146\1\301"+
    "\22\0\10\146\1\u0263\16\146\1\0\11\301\1\u0264\16\301"+
    "\3\0\1\301\32\0\1\u0248\17\0\11\301\1\u0264\16\301"+
    "\2\0\1\146\1\147\22\0\10\146\1\u0263\16\146\1\0"+
    "\11\44\1\u0265\16\44\2\0\1\146\1\301\22\0\1\u0153"+
    "\26\146\1\0\1\301\1\u0154\26\301\3\0\1\301\22\0"+
    "\1\u011f\27\0\1\301\1\u0154\26\301\2\0\1\146\1\147"+
    "\22\0\1\u0153\26\146\1\0\1\44\1\u0158\26\44\2\0"+
    "\1\146\1\301\22\0\1\u0266\26\146\1\0\1\301\1\u0267"+
    "\26\301\3\0\1\301\22\0\1\u024a\27\0\1\301\1\u0267"+
    "\26\301\2\0\1\146\1\301\22\0\23\146\1\u0268\3\146"+
    "\1\0\24\301\1\u0269\3\301\3\0\1\301\45\0\1\u024b"+
    "\4\0\24\301\1\u0269\3\301\2\0\1\146\1\147\22\0"+
    "\1\u0266\26\146\1\0\1\44\1\u026a\26\44\2\0\1\146"+
    "\1\147\22\0\23\146\1\u0268\3\146\1\0\24\44\1\u026b"+
    "\3\44\46\0\1\u026c\30\0\1\u026c\11\0\1\62\42\0"+
    "\1\u026c\7\0\21\62\1\u026d\6\62\36\0\1\u026e\30\0"+
    "\1\u026e\45\0\1\u026f\30\0\1\u026f\30\0\1\62\32\0"+
    "\1\u026e\17\0\11\62\1\u0270\16\62\3\0\1\62\23\0"+
    "\1\u026f\26\0\2\62\1\u0271\25\62\30\0\1\u0272\30\0"+
    "\1\u0272\27\0\1\62\24\0\1\u0272\25\0\3\62\1\u0273"+
    "\24\62\30\0\1\u0274\30\0\1\u0274\62\0\1\u0275\30\0"+
    "\1\u0275\21\0\1\62\24\0\1\u0274\25\0\3\62\1\u0276"+
    "\24\62\3\0\1\62\32\0\1\u0275\17\0\11\62\1\u0277"+
    "\16\62\35\0\1\253\30\0\1\253\22\0\1\62\31\0"+
    "\1\253\20\0\10\62\1\254\17\62\30\0\1\u0278\30\0"+
    "\1\u0278\53\0\1\u0279\30\0\1\u0279\30\0\1\62\24\0"+
    "\1\u0278\25\0\3\62\1\u027a\24\62\3\0\1\62\23\0"+
    "\1\u0279\26\0\2\62\1\u027b\25\62\2\0\1\146\1\301"+
    "\22\0\20\146\1\u027c\6\146\1\0\21\301\1\u027d\6\301"+
    "\3\0\1\301\42\0\1\u026c\7\0\21\301\1\u027d\6\301"+
    "\2\0\1\146\1\147\22\0\20\146\1\u027c\6\146\1\0"+
    "\21\44\1\u027e\6\44\2\0\1\146\1\301\22\0\10\146"+
    "\1\u027f\16\146\1\0\11\301\1\u0280\16\301\3\0\1\301"+
    "\32\0\1\u026e\17\0\11\301\1\u0280\16\301\2\0\1\146"+
    "\1\301\22\0\1\146\1\u0281\25\146\1\0\2\301\1\u0282"+
    "\25\301\3\0\1\301\23\0\1\u026f\26\0\2\301\1\u0282"+
    "\25\301\2\0\1\146\1\147\22\0\10\146\1\u027f\16\146"+
    "\1\0\11\44\1\u0283\16\44\2\0\1\146\1\147\22\0"+
    "\1\146\1\u0281\25\146\1\0\2\44\1\u0284\25\44\2\0"+
    "\1\146\1\301\22\0\2\146\1\u0285\24\146\1\0\3\301"+
    "\1\u0286\24\301\3\0\1\301\24\0\1\u0272\25\0\3\301"+
    "\1\u0286\24\301\2\0\1\146\1\147\22\0\2\146\1\u0285"+
    "\24\146\1\0\3\44\1\u0287\24\44\2\0\1\146\1\301"+
    "\22\0\2\146\1\u0288\24\146\1\0\3\301\1\u0289\24\301"+
    "\3\0\1\301\24\0\1\u0274\25\0\3\301\1\u0289\24\301"+
    "\2\0\1\146\1\301\22\0\10\146\1\u028a\16\146\1\0"+
    "\11\301\1\u028b\16\301\3\0\1\301\32\0\1\u0275\17\0"+
    "\11\301\1\u028b\16\301\2\0\1\146\1\147\22\0\2\146"+
    "\1\u0288\24\146\1\0\3\44\1\u028c\24\44\2\0\1\146"+
    "\1\147\22\0\10\146\1\u028a\16\146\1\0\11\44\1\u028d"+
    "\16\44\2\0\1\146\1\301\22\0\7\146\1\343\17\146"+
    "\1\0\10\301\1\344\17\301\3\0\1\301\31\0\1\253"+
    "\20\0\10\301\1\344\17\301\2\0\1\146\1\147\22\0"+
    "\7\146\1\343\17\146\1\0\10\44\1\345\17\44\2\0"+
    "\1\146\1\301\22\0\2\146\1\u028e\24\146\1\0\3\301"+
    "\1\u028f\24\301\3\0\1\301\24\0\1\u0278\25\0\3\301"+
    "\1\u028f\24\301\2\0\1\146\1\301\22\0\1\146\1\u0290"+
    "\25\146\1\0\2\301\1\u0291\25\301\3\0\1\301\23\0"+
    "\1\u0279\26\0\2\301\1\u0291\25\301\2\0\1\146\1\147"+
    "\22\0\2\146\1\u028e\24\146\1\0\3\44\1\u0292\24\44"+
    "\2\0\1\146\1\147\22\0\1\146\1\u0290\25\146\1\0"+
    "\2\44\1\u0293\25\44\34\0\1\u0294\30\0\1\u0294\23\0"+
    "\1\62\30\0\1\u0294\21\0\7\62\1\u0295\20\62\26\0"+
    "\1\u0296\30\0\1\u0296\56\0\1\u0297\30\0\1\u0297\27\0"+
    "\1\62\22\0\1\u0296\27\0\1\62\1\u0298\26\62\3\0"+
    "\1\62\24\0\1\u0297\25\0\3\62\1\u0299\24\62\40\0"+
    "\1\u029a\30\0\1\u029a\17\0\1\62\34\0\1\u029a\15\0"+
    "\13\62\1\u029b\14\62\43\0\1\u029c\30\0\1\u029c\52\0"+
    "\1\u029d\30\0\1\u029d\16\0\1\62\37\0\1\u029c\12\0"+
    "\16\62\1\u029e\11\62\3\0\1\62\35\0\1\u029d\14\0"+
    "\14\62\1\u029f\13\62\2\0\1\146\1\301\22\0\6\146"+
    "\1\u02a0\20\146\1\0\7\301\1\u02a1\20\301\3\0\1\301"+
    "\30\0\1\u0294\21\0\7\301\1\u02a1\20\301\2\0\1\146"+
    "\1\147\22\0\6\146\1\u02a0\20\146\1\0\7\44\1\u02a2"+
    "\20\44\2\0\1\146\1\301\22\0\1\u02a3\26\146\1\0"+
    "\1\301\1\u02a4\26\301\3\0\1\301\22\0\1\u0296\27\0"+
    "\1\301\1\u02a4\26\301\2\0\1\146\1\301\22\0\2\146"+
    "\1\u02a5\24\146\1\0\3\301\1\u02a6\24\301\3\0\1\301"+
    "\24\0\1\u0297\25\0\3\301\1\u02a6\24\301\2\0\1\146"+
    "\1\147\22\0\1\u02a3\26\146\1\0\1\44\1\u02a7\26\44"+
    "\2\0\1\146\1\147\22\0\2\146\1\u02a5\24\146\1\0"+
    "\3\44\1\u02a8\24\44\2\0\1\146\1\301\22\0\12\146"+
    "\1\u02a9\14\146\1\0\13\301\1\u02aa\14\301\3\0\1\301"+
    "\34\0\1\u029a\15\0\13\301\1\u02aa\14\301\2\0\1\146"+
    "\1\147\22\0\12\146\1\u02a9\14\146\1\0\13\44\1\u02ab"+
    "\14\44\2\0\1\146\1\301\22\0\15\146\1\u02ac\11\146"+
    "\1\0\16\301\1\u02ad\11\301\3\0\1\301\37\0\1\u029c"+
    "\12\0\16\301\1\u02ad\11\301\2\0\1\146\1\301\22\0"+
    "\13\146\1\u02ae\13\146\1\0\14\301\1\u02af\13\301\3\0"+
    "\1\301\35\0\1\u029d\14\0\14\301\1\u02af\13\301\2\0"+
    "\1\146\1\147\22\0\15\146\1\u02ac\11\146\1\0\16\44"+
    "\1\u02b0\11\44\2\0\1\146\1\147\22\0\13\146\1\u02ae"+
    "\13\146\1\0\14\44\1\u02b1\13\44\36\0\1\u02b2\30\0"+
    "\1\u02b2\21\0\1\62\32\0\1\u02b2\17\0\11\62\1\u02b3"+
    "\16\62\45\0\1\u02b4\30\0\1\u02b4\40\0\1\u02b5\30\0"+
    "\1\u02b5\26\0\1\62\41\0\1\u02b4\10\0\20\62\1\u02b6"+
    "\7\62\3\0\1\62\25\0\1\u02b5\24\0\4\62\1\u02b7"+
    "\23\62\41\0\1\u02b8\30\0\1\u02b8\16\0\1\62\35\0"+
    "\1\u02b8\14\0\14\62\1\u02b9\13\62\52\0\1\u02ba\30\0"+
    "\1\u02ba\32\0\1\u02bb\30\0\1\u02bb\27\0\1\62\46\0"+
    "\1\u02ba\3\0\25\62\1\u02bc\2\62\3\0\1\62\24\0"+
    "\1\u02bb\25\0\3\62\1\u02bd\24\62\2\0\1\146\1\301"+
    "\22\0\10\146\1\u02be\16\146\1\0\11\301\1\u02bf\16\301"+
    "\3\0\1\301\32\0\1\u02b2\17\0\11\301\1\u02bf\16\301"+
    "\2\0\1\146\1\147\22\0\10\146\1\u02be\16\146\1\0"+
    "\11\44\1\u02c0\16\44\2\0\1\146\1\301\22\0\17\146"+
    "\1\u02c1\7\146\1\0\20\301\1\u02c2\7\301\3\0\1\301"+
    "\41\0\1\u02b4\10\0\20\301\1\u02c2\7\301\2\0\1\146"+
    "\1\301\22\0\3\146\1\u02c3\23\146\1\0\4\301\1\u02c4"+
    "\23\301\3\0\1\301\25\0\1\u02b5\24\0\4\301\1\u02c4"+
    "\23\301\2\0\1\146\1\147\22\0\17\146\1\u02c1\7\146"+
    "\1\0\20\44\1\u02c5\7\44\2\0\1\146\1\147\22\0"+
    "\3\146\1\u02c3\23\146\1\0\4\44\1\u02c6\23\44\2\0"+
    "\1\146\1\301\22\0\13\146\1\u02c7\13\146\1\0\14\301"+
    "\1\u02c8\13\301\3\0\1\301\35\0\1\u02b8\14\0\14\301"+
    "\1\u02c8\13\301\2\0\1\146\1\147\22\0\13\146\1\u02c7"+
    "\13\146\1\0\14\44\1\u02c9\13\44\2\0\1\146\1\301"+
    "\22\0\24\146\1\u02ca\2\146\1\0\25\301\1\u02cb\2\301"+
    "\3\0\1\301\46\0\1\u02ba\3\0\25\301\1\u02cb\2\301"+
    "\2\0\1\146\1\301\22\0\2\146\1\u02cc\24\146\1\0"+
    "\3\301\1\u02cd\24\301\3\0\1\301\24\0\1\u02bb\25\0"+
    "\3\301\1\u02cd\24\301\2\0\1\146\1\147\22\0\24\146"+
    "\1\u02ca\2\146\1\0\25\44\1\u02ce\2\44\2\0\1\146"+
    "\1\147\22\0\2\146\1\u02cc\24\146\1\0\3\44\1\u02cf"+
    "\24\44\26\0\1\u02d0\30\0\1\u02d0\31\0\1\62\22\0"+
    "\1\u02d0\27\0\1\62\1\u02d1\26\62\32\0\1\u02d2\30\0"+
    "\1\u02d2\25\0\1\62\26\0\1\u02d2\23\0\5\62\1\u02d3"+
    "\22\62\42\0\1\u02d4\30\0\1\u02d4\15\0\1\62\36\0"+
    "\1\u02d4\13\0\15\62\1\u02d5\12\62\32\0\1\u02d6\30\0"+
    "\1\u02d6\50\0\1\u0297\30\0\1\u0297\31\0\1\62\26\0"+
    "\1\u02d6\23\0\5\62\1\u02d7\22\62\3\0\1\62\22\0"+
    "\1\u0297\27\0\1\62\1\u0299\26\62\2\0\1\146\1\301"+
    "\22\0\1\u02d8\26\146\1\0\1\301\1\u02d9\26\301\3\0"+
    "\1\301\22\0\1\u02d0\27\0\1\301\1\u02d9\26\301\2\0"+
    "\1\146\1\147\22\0\1\u02d8\26\146\1\0\1\44\1\u02da"+
    "\26\44\2\0\1\146\1\301\22\0\4\146\1\u02db\22\146"+
    "\1\0\5\301\1\u02dc\22\301\3\0\1\301\26\0\1\u02d2"+
    "\23\0\5\301\1\u02dc\22\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u02db\22\146\1\0\5\44\1\u02dd\22\44\2\0"+
    "\1\146\1\301\22\0\14\146\1\u02de\12\146\1\0\15\301"+
    "\1\u02df\12\301\3\0\1\301\36\0\1\u02d4\13\0\15\301"+
    "\1\u02df\12\301\2\0\1\146\1\147\22\0\14\146\1\u02de"+
    "\12\146\1\0\15\44\1\u02e0\12\44\2\0\1\146\1\301"+
    "\22\0\4\146\1\u02e1\22\146\1\0\5\301\1\u02e2\22\301"+
    "\3\0\1\301\26\0\1\u02d6\23\0\5\301\1\u02e2\22\301"+
    "\2\0\1\146\1\301\22\0\1\u02a5\26\146\1\0\1\301"+
    "\1\u02a6\26\301\3\0\1\301\22\0\1\u0297\27\0\1\301"+
    "\1\u02a6\26\301\2\0\1\146\1\147\22\0\4\146\1\u02e1"+
    "\22\146\1\0\5\44\1\u02e3\22\44\2\0\1\146\1\147"+
    "\22\0\1\u02a5\26\146\1\0\1\44\1\u02a8\26\44\45\0"+
    "\1\u02e4\30\0\1\u02e4\12\0\1\62\41\0\1\u02e4\10\0"+
    "\20\62\1\u02e5\7\62\41\0\1\u02e6\30\0\1\u02e6\16\0"+
    "\1\62\35\0\1\u02e6\14\0\14\62\1\u02e7\13\62\2\0"+
    "\1\146\1\301\22\0\17\146\1\u02e8\7\146\1\0\20\301"+
    "\1\u02e9\7\301\3\0\1\301\41\0\1\u02e4\10\0\20\301"+
    "\1\u02e9\7\301\2\0\1\146\1\147\22\0\17\146\1\u02e8"+
    "\7\146\1\0\20\44\1\u02ea\7\44\2\0\1\146\1\301"+
    "\22\0\13\146\1\u02eb\13\146\1\0\14\301\1\u02ec\13\301"+
    "\3\0\1\301\35\0\1\u02e6\14\0\14\301\1\u02ec\13\301"+
    "\2\0\1\146\1\147\22\0\13\146\1\u02eb\13\146\1\0"+
    "\14\44\1\u02ed\13\44\31\0\1\u02ee\30\0\1\u02ee\26\0"+
    "\1\62\25\0\1\u02ee\24\0\4\62\1\u02ef\23\62\2\0"+
    "\1\146\1\301\22\0\3\146\1\u02f0\23\146\1\0\4\301"+
    "\1\u02f1\23\301\3\0\1\301\25\0\1\u02ee\24\0\4\301"+
    "\1\u02f1\23\301\2\0\1\146\1\147\22\0\3\146\1\u02f0"+
    "\23\146\1\0\4\44\1\u02f2\23\44\32\0\1\u02f3\30\0"+
    "\1\u02f3\25\0\1\62\26\0\1\u02f3\23\0\5\62\1\u02f4"+
    "\22\62\2\0\1\146\1\301\22\0\4\146\1\u02f5\22\146"+
    "\1\0\5\301\1\u02f6\22\301\3\0\1\301\26\0\1\u02f3"+
    "\23\0\5\301\1\u02f6\22\301\2\0\1\146\1\147\22\0"+
    "\4\146\1\u02f5\22\146\1\0\5\44\1\u02f7\22\44\31\0"+
    "\1\u02f8\30\0\1\u02f8\26\0\1\62\25\0\1\u02f8\24\0"+
    "\4\62\1\u02f9\23\62\2\0\1\146\1\301\22\0\3\146"+
    "\1\u02fa\23\146\1\0\4\301\1\u02fb\23\301\3\0\1\301"+
    "\25\0\1\u02f8\24\0\4\301\1\u02fb\23\301\2\0\1\146"+
    "\1\147\22\0\3\146\1\u02fa\23\146\1\0\4\44\1\u02fc"+
    "\23\44\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[46620];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\5\1\2\11\4\1\11\11\34\1\2\0"+
    "\1\1\4\11\2\0\2\1\2\0\2\1\2\0\2\1"+
    "\1\0\1\1\2\0\4\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\4\0\4\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\0\60\1\2\0\2\1\2\0\2\1"+
    "\2\0\2\1\2\0\2\1\3\0\3\1\1\11\1\1"+
    "\1\0\1\1\1\0\1\1\3\0\3\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\104\1\2\0\2\1"+
    "\2\0\2\1\2\0\2\1\1\11\1\0\2\1\2\0"+
    "\1\11\3\1\1\0\1\1\1\0\1\1\3\0\3\1"+
    "\1\0\1\1\1\0\1\1\1\0\72\1\1\11\1\0"+
    "\2\1\2\0\2\1\2\0\2\1\1\0\1\1\2\0"+
    "\2\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\56\1\1\0\1\1\1\11"+
    "\1\0\2\1\2\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\57\1\1\11\1\1\1\0\1\1"+
    "\1\0\3\1\1\0\1\1\2\0\2\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\2\0\51\1"+
    "\1\0\1\1\2\0\2\1\1\0\1\1\2\0\2\1"+
    "\1\11\1\1\1\0\1\1\2\0\40\1\1\0\1\1"+
    "\2\0\2\1\1\11\1\1\1\11\1\0\2\1\2\0"+
    "\32\1\1\0\1\1\2\0\2\1\1\0\1\1\2\0"+
    "\24\1\1\0\1\1\1\11\1\0\2\1\1\0\1\1"+
    "\2\0\24\1\1\0\1\1\1\11\1\1\1\0\1\1"+
    "\1\11\15\1\1\11\1\1\1\0\7\1\1\0\4\1"+
    "\1\0\4\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[764];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;
    public static LinkedList<TError> TablaEL = new LinkedList<TError>();


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 168) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { /* ignore */
          }
        case 43: break;
        case 13: 
          { lexeme = "delimitador_izquierdo";
                    System.out.println("Reconoció "+yytext()+" delimitador_izquierdo"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("{");
                    return new Symbol(Simbolos.delimitador_izquierdo,   yycolumn, yyline, yytext());
          }
        case 44: break;
        case 41: 
          { lexeme="encenderVSort";
                    System.out.println("Reconoció "+yytext()+" encenderVSort"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.encenderVSort,               yycolumn, yyline, yytext());
          }
        case 45: break;
        case 14: 
          { lexeme = "delimitador_derecho";
                    System.out.println("Reconoció "+yytext()+" delimitador_derecho"); 
                    if(Editor.estructura_si>0){
                    Editor.elementosPila.add("}");
                    Editor.estructura_si=0;
                    }
                    return new Symbol(Simbolos.delimitador_derecho,     yycolumn, yyline, yytext());
          }
        case 46: break;
        case 4: 
          { lexeme = "separador";
                    System.out.println("Reconoció "+yytext()+" separador"); 
                    return new Symbol(Simbolos.separador,               yycolumn, yyline, yytext());
          }
        case 47: break;
        case 18: 
          { lexeme = "Identificador";
                                        System.out.println("Reconoció "+yytext()+" Identificador");
                                        return new Symbol(Simbolos.Identificador, yycolumn, yyline, yytext());
          }
        case 48: break;
        case 35: 
          { lexeme="mientras";
                    System.out.println("Reconoció "+yytext()+" mientras"); 
                    return new Symbol(Simbolos.mientras,               yycolumn, yyline, yytext());
          }
        case 49: break;
        case 31: 
          { lexeme="inicio";
                    System.out.println("Reconoció "+yytext()+" inicio"); 
                    return new Symbol(Simbolos.inicio,               yycolumn, yyline, yytext());
          }
        case 50: break;
        case 34: 
          { lexeme="funcion";
                    System.out.println("Reconoció "+yytext()+" funcion"); 
                    return new Symbol(Simbolos.funcion,               yycolumn, yyline, yytext());
          }
        case 51: break;
        case 33: 
          { lexeme="avanzar";
                    System.out.println("Reconoció "+yytext()+" avanzar"); 

if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.avanzar,               yycolumn, yyline, yytext());
          }
        case 52: break;
        case 36: 
          { lexeme="bajarBase";
                    System.out.println("Reconoció "+yytext()+" bajarBase"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.bajarBase,               yycolumn, yyline, yytext());
          }
        case 53: break;
        case 5: 
          { lexeme = "punto";
                    System.out.println("Reconoció "+yytext()+" punto"); 
                    return new Symbol(Simbolos.punto,                   yycolumn, yyline, yytext());
          }
        case 54: break;
        case 9: 
          { lexeme = "suma";
                    System.out.println("Reconoció "+yytext()+" suma"); 
                    return new Symbol(Simbolos.suma,                    yycolumn, yyline, yytext());
          }
        case 55: break;
        case 15: 
          { lexeme = "parentesis_abierto";
                    System.out.println("Reconoció "+yytext()+" parentesis_abierto"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("(");
                    return new Symbol(Simbolos.parentesis_abierto,      yycolumn, yyline, yytext());
          }
        case 56: break;
        case 30: 
          { lexeme="espera";
                    System.out.println("Reconoció "+yytext()+" espera"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.espera,               yycolumn, yyline, yytext());
          }
        case 57: break;
        case 29: 
          { lexeme="rueda";
                    System.out.println("Reconoció "+yytext()+" rueda"); 
                    return new Symbol(Simbolos.rueda,               yycolumn, yyline, yytext());
          }
        case 58: break;
        case 40: 
          { lexeme="girarDerecha";
                    System.out.println("Reconoció "+yytext()+" girarDerecha"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.girarDerecha,               yycolumn, yyline, yytext());
          }
        case 59: break;
        case 11: 
          { lexeme = "multiplicacion";
                    System.out.println("Reconoció "+yytext()+" multiplicacion"); 
                    return new Symbol(Simbolos.multiplicacion,          yycolumn, yyline, yytext());
          }
        case 60: break;
        case 32: 
          { lexeme="reversa";
                    System.out.println("Reconoció "+yytext()+" reversa"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.reversa,               yycolumn, yyline, yytext());
          }
        case 61: break;
        case 26: 
          { lexeme = "Reservada";
                    System.out.println("Reconoció "+yytext()+" Reservada");
                    return new Symbol(Simbolos.reservada, yycolumn, yyline, yytext());
          }
        case 62: break;
        case 21: 
          { lexeme="igual_que";
                    System.out.println("Reconoció "+yytext()+" igual_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.igual_que,               yycolumn, yyline, yytext());
          }
        case 63: break;
        case 23: 
          { lexeme="mayor_igual_que";
                    System.out.println("Reconoció "+yytext()+" mayor_igual_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.mayor_igual_que,               yycolumn, yyline, yytext());
          }
        case 64: break;
        case 42: 
          { lexeme="sensorProximidad";
                    System.out.println("Reconoció "+yytext()+" sensorProximidad"); 
                    return new Symbol(Simbolos.sensorProximidad,               yycolumn, yyline, yytext());
          }
        case 65: break;
        case 25: 
          { lexeme="si";
                    System.out.println("Reconoció "+yytext()+" si"); 
                    Editor.estructura_si++;
                    Editor.control_si=true;
                    Editor.elementosPila.add("si");
                    VariablesEnsamblador.palabra_si=true;
                    return new Symbol(Simbolos.si,               yycolumn, yyline, yytext());
          }
        case 66: break;
        case 37: 
          { lexeme="subirBase";
                    System.out.println("Reconoció "+yytext()+" subirBase"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.subirBase,               yycolumn, yyline, yytext());
          }
        case 67: break;
        case 2: 
          { System.out.println("Error Lexico "+yytext()+" Linea "+yyline+" Columna "+yycolumn+" ");

    String descError = "Error Lexico "+yytext()+" Linea "+(yyline+1)+" Columna "+(yycolumn+1);

    Editor.arrayError.add(new ErrorLink(descError,"Caracter no identificado.",yyline+1,yycolumn+1,yytext()));
    //Editor.setError();

    TError datos = new TError(yytext(),yyline,yycolumn,"Error Lexico","Simbolo no existe en el lenguaje");
    TablaEL.add(datos);
          }
        case 68: break;
        case 24: 
          { lexeme = "diferente";
                    System.out.println("Reconoció "+yytext()+" diferente_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.diferente_que,              yycolumn, yyline, yytext());
          }
        case 69: break;
        case 27: 
          { lexeme="base";
                    System.out.println("Reconoció "+yytext()+" base"); 
                    return new Symbol(Simbolos.base,               yycolumn, yyline, yytext());
          }
        case 70: break;
        case 7: 
          { lexeme="menor_que";
                    System.out.println("Reconoció "+yytext()+" menor_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.menor_que,               yycolumn, yyline, yytext());
          }
        case 71: break;
        case 17: 
          { lexeme="fin_linea";
                    System.out.println("Reconoció "+yytext()+" fin_linea"); 
                    return new Symbol(Simbolos.fin_linea,               yycolumn, yyline, yytext());
          }
        case 72: break;
        case 10: 
          { lexeme = "resta";
                    System.out.println("Reconoció "+yytext()+" resta"); 
                    return new Symbol(Simbolos.resta,                   yycolumn, yyline, yytext());
          }
        case 73: break;
        case 22: 
          { lexeme="menor_igual_que";
                    System.out.println("Reconoció "+yytext()+" menor_igual_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.menor_igual_que,               yycolumn, yyline, yytext());
          }
        case 74: break;
        case 28: 
          { lexeme="sino";
                    VariablesEnsamblador.palabra_si=false;
                    System.out.println("Reconoció "+yytext()+" sino"); 
                    return new Symbol(Simbolos.sino,               yycolumn, yyline, yytext());
          }
        case 75: break;
        case 39: 
          { lexeme="girarIzquierda";
                    System.out.println("Reconoció "+yytext()+" girarIzquierda"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                        }
                    return new Symbol(Simbolos.girarIzquierda,               yycolumn, yyline, yytext());
          }
        case 76: break;
        case 12: 
          { lexeme = "division";
                    System.out.println("Reconoció "+yytext()+" division"); 
                    return new Symbol(Simbolos.division,                yycolumn, yyline, yytext());
          }
        case 77: break;
        case 16: 
          { lexeme = "parentesis_cerrado";
                    System.out.println("Reconoció "+yytext()+" parentesis_cerrado"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add(")");

                    return new Symbol(Simbolos.parentesis_cerrado,      yycolumn, yyline, yytext());
          }
        case 78: break;
        case 1: 
          { lexeme = "Numero";
                     System.out.println("Reconoció "+yytext()+" Numero");
                     return new Symbol(Simbolos.Numero, yycolumn, yyline, yytext());
          }
        case 79: break;
        case 38: 
          { lexeme="apagarVSort";
                    System.out.println("Reconoció "+yytext()+" apagarVSort"); 
if(Editor.estructura_si>0)
                        {
                            Editor.elementosPila.add("cuerpo");   
                    return new Symbol(Simbolos.apagarVSort,               yycolumn, yyline, yytext());
                        }
          }
        case 80: break;
        case 20: 
          { lexeme = "cadena";
                                                   System.out.println("Reconoció "+yytext()+" Cadena");
                                                   return new Symbol(Simbolos.Cadena, yycolumn, yyline, yytext());
          }
        case 81: break;
        case 19: 
          { lexeme = "Clase";
                                               System.out.println("Reconoció "+yytext()+" Clase");
                                               return new Symbol(Simbolos.Clase, yycolumn, yyline, yytext());
          }
        case 82: break;
        case 6: 
          { lexeme = "igual";
                    System.out.println("Reconoció "+yytext()+" igual"); 
                    return new Symbol(Simbolos.igual,              yycolumn, yyline, yytext());
          }
        case 83: break;
        case 8: 
          { lexeme="mayor_que";
                    System.out.println("Reconoció "+yytext()+" mayorr_que"); 
                    if(Editor.estructura_si>0)
                    Editor.elementosPila.add("condicion");
                    return new Symbol(Simbolos.mayor_que,               yycolumn, yyline, yytext());
          }
        case 84: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(Simbolos.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
